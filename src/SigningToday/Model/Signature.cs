/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// Signature
    /// </summary>
    [DataContract]
    public partial class Signature :  IEquatable<Signature>, IValidatableObject
    {
        /// <summary>
        /// Status of the signature, which can be _signed_ or _declined_
        /// </summary>
        /// <value>Status of the signature, which can be _signed_ or _declined_</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Signed for value: signed
            /// </summary>
            [EnumMember(Value = "signed")]
            Signed = 1,

            /// <summary>
            /// Enum Declined for value: declined
            /// </summary>
            [EnumMember(Value = "declined")]
            Declined = 2

        }

        /// <summary>
        /// Status of the signature, which can be _signed_ or _declined_
        /// </summary>
        /// <value>Status of the signature, which can be _signed_ or _declined_</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Signature" /> class.
        /// </summary>
        /// <param name="documentId">Id of the document.</param>
        /// <param name="signatureRequestId">Id of the requested signature.</param>
        /// <param name="signedAt">Indicates when the DST has been signed.</param>
        /// <param name="declinedReason">declinedReason.</param>
        /// <param name="extraData">Extra data of the signature.</param>
        public Signature(int documentId = default(int), int signatureRequestId = default(int), DateTime signedAt = default(DateTime), string declinedReason = default(string), Dictionary<string, Object> extraData = default(Dictionary<string, Object>))
        {
            this.DocumentId = documentId;
            this.SignatureRequestId = signatureRequestId;
            this.SignedAt = signedAt;
            this.DeclinedReason = declinedReason;
            this.ExtraData = extraData;
        }
        
        /// <summary>
        /// It is a reference for internal use
        /// </summary>
        /// <value>It is a reference for internal use</value>
        [DataMember(Name="_instance_id", EmitDefaultValue=false)]
        public long InstanceId { get; private set; }

        /// <summary>
        /// Id of the document
        /// </summary>
        /// <value>Id of the document</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public int DocumentId { get; set; }

        /// <summary>
        /// Id of the requested signature
        /// </summary>
        /// <value>Id of the requested signature</value>
        [DataMember(Name="signatureRequestId", EmitDefaultValue=false)]
        public int SignatureRequestId { get; set; }

        /// <summary>
        /// Indicates when the DST has been signed
        /// </summary>
        /// <value>Indicates when the DST has been signed</value>
        [DataMember(Name="signedAt", EmitDefaultValue=false)]
        public DateTime SignedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeclinedReason
        /// </summary>
        [DataMember(Name="declinedReason", EmitDefaultValue=false)]
        public string DeclinedReason { get; set; }


        /// <summary>
        /// Extra data of the signature
        /// </summary>
        /// <value>Extra data of the signature</value>
        [DataMember(Name="extraData", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Signature {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  SignatureRequestId: ").Append(SignatureRequestId).Append("\n");
            sb.Append("  SignedAt: ").Append(SignedAt).Append("\n");
            sb.Append("  DeclinedReason: ").Append(DeclinedReason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Signature);
        }

        /// <summary>
        /// Returns true if Signature instances are equal
        /// </summary>
        /// <param name="input">Instance of Signature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Signature input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.SignatureRequestId == input.SignatureRequestId ||
                    (this.SignatureRequestId != null &&
                    this.SignatureRequestId.Equals(input.SignatureRequestId))
                ) && 
                (
                    this.SignedAt == input.SignedAt ||
                    (this.SignedAt != null &&
                    this.SignedAt.Equals(input.SignedAt))
                ) && 
                (
                    this.DeclinedReason == input.DeclinedReason ||
                    (this.DeclinedReason != null &&
                    this.DeclinedReason.Equals(input.DeclinedReason))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    input.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.SignatureRequestId != null)
                    hashCode = hashCode * 59 + this.SignatureRequestId.GetHashCode();
                if (this.SignedAt != null)
                    hashCode = hashCode * 59 + this.SignedAt.GetHashCode();
                if (this.DeclinedReason != null)
                    hashCode = hashCode * 59 + this.DeclinedReason.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
