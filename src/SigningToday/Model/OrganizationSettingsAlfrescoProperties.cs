/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// OrganizationSettingsAlfrescoProperties
    /// </summary>
    [DataContract]
    public partial class OrganizationSettingsAlfrescoProperties :  IEquatable<OrganizationSettingsAlfrescoProperties>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Rest for value: rest
            /// </summary>
            [EnumMember(Value = "rest")]
            Rest = 1,

            /// <summary>
            /// Enum Cmis for value: cmis
            /// </summary>
            [EnumMember(Value = "cmis")]
            Cmis = 2

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingsAlfrescoProperties" /> class.
        /// </summary>
        /// <param name="enabled">enabled (default to false).</param>
        /// <param name="type">type.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="basePath">basePath.</param>
        /// <param name="relativePath">relativePath.</param>
        /// <param name="baseNodeId">baseNodeId.</param>
        public OrganizationSettingsAlfrescoProperties(bool enabled = false, TypeEnum? type = default(TypeEnum?), string username = default(string), string password = default(string), string basePath = default(string), string relativePath = default(string), string baseNodeId = default(string))
        {
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = false;
            }
            else
            {
                this.Enabled = enabled;
            }
            this.Type = type;
            this.Username = username;
            this.Password = password;
            this.BasePath = basePath;
            this.RelativePath = relativePath;
            this.BaseNodeId = baseNodeId;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }


        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets BasePath
        /// </summary>
        [DataMember(Name="basePath", EmitDefaultValue=false)]
        public string BasePath { get; set; }

        /// <summary>
        /// Gets or Sets RelativePath
        /// </summary>
        [DataMember(Name="relativePath", EmitDefaultValue=false)]
        public string RelativePath { get; set; }

        /// <summary>
        /// Gets or Sets BaseNodeId
        /// </summary>
        [DataMember(Name="baseNodeId", EmitDefaultValue=false)]
        public string BaseNodeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationSettingsAlfrescoProperties {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  BasePath: ").Append(BasePath).Append("\n");
            sb.Append("  RelativePath: ").Append(RelativePath).Append("\n");
            sb.Append("  BaseNodeId: ").Append(BaseNodeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationSettingsAlfrescoProperties);
        }

        /// <summary>
        /// Returns true if OrganizationSettingsAlfrescoProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationSettingsAlfrescoProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationSettingsAlfrescoProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.BasePath == input.BasePath ||
                    (this.BasePath != null &&
                    this.BasePath.Equals(input.BasePath))
                ) && 
                (
                    this.RelativePath == input.RelativePath ||
                    (this.RelativePath != null &&
                    this.RelativePath.Equals(input.RelativePath))
                ) && 
                (
                    this.BaseNodeId == input.BaseNodeId ||
                    (this.BaseNodeId != null &&
                    this.BaseNodeId.Equals(input.BaseNodeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.BasePath != null)
                    hashCode = hashCode * 59 + this.BasePath.GetHashCode();
                if (this.RelativePath != null)
                    hashCode = hashCode * 59 + this.RelativePath.GetHashCode();
                if (this.BaseNodeId != null)
                    hashCode = hashCode * 59 + this.BaseNodeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
