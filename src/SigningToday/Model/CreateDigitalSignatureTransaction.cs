/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// The **DST Template** from which will be created the DST 
    /// </summary>
    [DataContract]
    public partial class CreateDigitalSignatureTransaction :  IEquatable<CreateDigitalSignatureTransaction>, IValidatableObject
    {
        /// <summary>
        /// Status of the _DST_
        /// </summary>
        /// <value>Status of the _DST_</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum Published for value: published
            /// </summary>
            [EnumMember(Value = "published")]
            Published = 2

        }

        /// <summary>
        /// Status of the _DST_
        /// </summary>
        /// <value>Status of the _DST_</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDigitalSignatureTransaction" /> class.
        /// </summary>
        /// <param name="title">Title of the _Digital Signature Transaction_.</param>
        /// <param name="documents">The document or documents of the _DST_.</param>
        /// <param name="status">Status of the _DST_.</param>
        /// <param name="expiresAt">Date of expiration of the _DST_.</param>
        /// <param name="tags">An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search.</param>
        /// <param name="template">True if the _DST_ has been created from a template.</param>
        /// <param name="publicTemplate">Indicates if a public template has been used to create the DST or not.</param>
        /// <param name="ccGroups">Name of groups that are informed about the DST..</param>
        /// <param name="ccUsers">UUIDs of the users that are informed about the DST..</param>
        /// <param name="urgent">True if the DST is flagged as urgent.</param>
        public CreateDigitalSignatureTransaction(string title = default(string), List<CreateDocument> documents = default(List<CreateDocument>), StatusEnum? status = default(StatusEnum?), DateTime expiresAt = default(DateTime), List<string> tags = default(List<string>), bool template = default(bool), bool publicTemplate = default(bool), List<string> ccGroups = default(List<string>), List<Guid> ccUsers = default(List<Guid>), bool urgent = default(bool))
        {
            this.Title = title;
            this.Documents = documents;
            this.Status = status;
            this.ExpiresAt = expiresAt;
            this.Tags = tags;
            this.Template = template;
            this.PublicTemplate = publicTemplate;
            this.CcGroups = ccGroups;
            this.CcUsers = ccUsers;
            this.Urgent = urgent;
        }
        
        /// <summary>
        /// Title of the _Digital Signature Transaction_
        /// </summary>
        /// <value>Title of the _Digital Signature Transaction_</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The document or documents of the _DST_
        /// </summary>
        /// <value>The document or documents of the _DST_</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<CreateDocument> Documents { get; set; }


        /// <summary>
        /// Date of expiration of the _DST_
        /// </summary>
        /// <value>Date of expiration of the _DST_</value>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search
        /// </summary>
        /// <value>An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// True if the _DST_ has been created from a template
        /// </summary>
        /// <value>True if the _DST_ has been created from a template</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public bool Template { get; set; }

        /// <summary>
        /// Indicates if a public template has been used to create the DST or not
        /// </summary>
        /// <value>Indicates if a public template has been used to create the DST or not</value>
        [DataMember(Name="publicTemplate", EmitDefaultValue=false)]
        public bool PublicTemplate { get; set; }

        /// <summary>
        /// Name of groups that are informed about the DST.
        /// </summary>
        /// <value>Name of groups that are informed about the DST.</value>
        [DataMember(Name="ccGroups", EmitDefaultValue=false)]
        public List<string> CcGroups { get; set; }

        /// <summary>
        /// UUIDs of the users that are informed about the DST.
        /// </summary>
        /// <value>UUIDs of the users that are informed about the DST.</value>
        [DataMember(Name="ccUsers", EmitDefaultValue=false)]
        public List<Guid> CcUsers { get; set; }

        /// <summary>
        /// True if the DST is flagged as urgent
        /// </summary>
        /// <value>True if the DST is flagged as urgent</value>
        [DataMember(Name="urgent", EmitDefaultValue=false)]
        public bool Urgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDigitalSignatureTransaction {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  PublicTemplate: ").Append(PublicTemplate).Append("\n");
            sb.Append("  CcGroups: ").Append(CcGroups).Append("\n");
            sb.Append("  CcUsers: ").Append(CcUsers).Append("\n");
            sb.Append("  Urgent: ").Append(Urgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDigitalSignatureTransaction);
        }

        /// <summary>
        /// Returns true if CreateDigitalSignatureTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDigitalSignatureTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDigitalSignatureTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.PublicTemplate == input.PublicTemplate ||
                    (this.PublicTemplate != null &&
                    this.PublicTemplate.Equals(input.PublicTemplate))
                ) && 
                (
                    this.CcGroups == input.CcGroups ||
                    this.CcGroups != null &&
                    input.CcGroups != null &&
                    this.CcGroups.SequenceEqual(input.CcGroups)
                ) && 
                (
                    this.CcUsers == input.CcUsers ||
                    this.CcUsers != null &&
                    input.CcUsers != null &&
                    this.CcUsers.SequenceEqual(input.CcUsers)
                ) && 
                (
                    this.Urgent == input.Urgent ||
                    (this.Urgent != null &&
                    this.Urgent.Equals(input.Urgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.PublicTemplate != null)
                    hashCode = hashCode * 59 + this.PublicTemplate.GetHashCode();
                if (this.CcGroups != null)
                    hashCode = hashCode * 59 + this.CcGroups.GetHashCode();
                if (this.CcUsers != null)
                    hashCode = hashCode * 59 + this.CcUsers.GetHashCode();
                if (this.Urgent != null)
                    hashCode = hashCode * 59 + this.Urgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
