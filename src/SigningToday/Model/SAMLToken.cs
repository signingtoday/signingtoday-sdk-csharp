/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// SAMLToken
    /// </summary>
    [DataContract]
    public partial class SAMLToken :  IEquatable<SAMLToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLToken" /> class.
        /// </summary>
        /// <param name="notOnorafter">notOnorafter.</param>
        /// <param name="surname">surname.</param>
        /// <param name="givenName">givenName.</param>
        /// <param name="commonName">commonName.</param>
        /// <param name="rfc822Mailbox">rfc822Mailbox.</param>
        /// <param name="notBefore">notBefore.</param>
        /// <param name="userid">userid.</param>
        /// <param name="mailAlternateAddress">mailAlternateAddress.</param>
        /// <param name="eduPersonOrgDN">eduPersonOrgDN.</param>
        /// <param name="eduPersonPrincipalName">eduPersonPrincipalName.</param>
        /// <param name="isMemberOf">isMemberOf.</param>
        /// <param name="groups">groups.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="eduPersonTargetedID">eduPersonTargetedID.</param>
        /// <param name="cookies">cookies.</param>
        public SAMLToken(DateTime notOnorafter = default(DateTime), string surname = default(string), string givenName = default(string), string commonName = default(string), string rfc822Mailbox = default(string), DateTime notBefore = default(DateTime), string userid = default(string), string mailAlternateAddress = default(string), string eduPersonOrgDN = default(string), string eduPersonPrincipalName = default(string), List<string> isMemberOf = default(List<string>), List<string> groups = default(List<string>), string displayName = default(string), SAMLTokenEduPersonTargetedID eduPersonTargetedID = default(SAMLTokenEduPersonTargetedID), string cookies = default(string))
        {
            this.NotOnorafter = notOnorafter;
            this.Surname = surname;
            this.GivenName = givenName;
            this.CommonName = commonName;
            this.Rfc822Mailbox = rfc822Mailbox;
            this.NotBefore = notBefore;
            this.Userid = userid;
            this.MailAlternateAddress = mailAlternateAddress;
            this.EduPersonOrgDN = eduPersonOrgDN;
            this.EduPersonPrincipalName = eduPersonPrincipalName;
            this.IsMemberOf = isMemberOf;
            this.Groups = groups;
            this.DisplayName = displayName;
            this.EduPersonTargetedID = eduPersonTargetedID;
            this.Cookies = cookies;
        }
        
        /// <summary>
        /// Gets or Sets NotOnorafter
        /// </summary>
        [DataMember(Name="_not_onorafter", EmitDefaultValue=false)]
        public DateTime NotOnorafter { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets Rfc822Mailbox
        /// </summary>
        [DataMember(Name="rfc822Mailbox", EmitDefaultValue=false)]
        public string Rfc822Mailbox { get; set; }

        /// <summary>
        /// Gets or Sets NotBefore
        /// </summary>
        [DataMember(Name="_not_before", EmitDefaultValue=false)]
        public DateTime NotBefore { get; set; }

        /// <summary>
        /// Gets or Sets Userid
        /// </summary>
        [DataMember(Name="userid", EmitDefaultValue=false)]
        public string Userid { get; set; }

        /// <summary>
        /// Gets or Sets MailAlternateAddress
        /// </summary>
        [DataMember(Name="mailAlternateAddress", EmitDefaultValue=false)]
        public string MailAlternateAddress { get; set; }

        /// <summary>
        /// Gets or Sets EduPersonOrgDN
        /// </summary>
        [DataMember(Name="eduPersonOrgDN", EmitDefaultValue=false)]
        public string EduPersonOrgDN { get; set; }

        /// <summary>
        /// Gets or Sets EduPersonPrincipalName
        /// </summary>
        [DataMember(Name="eduPersonPrincipalName", EmitDefaultValue=false)]
        public string EduPersonPrincipalName { get; set; }

        /// <summary>
        /// Gets or Sets IsMemberOf
        /// </summary>
        [DataMember(Name="isMemberOf", EmitDefaultValue=false)]
        public List<string> IsMemberOf { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EduPersonTargetedID
        /// </summary>
        [DataMember(Name="eduPersonTargetedID", EmitDefaultValue=false)]
        public SAMLTokenEduPersonTargetedID EduPersonTargetedID { get; set; }

        /// <summary>
        /// Gets or Sets Cookies
        /// </summary>
        [DataMember(Name="_cookies", EmitDefaultValue=false)]
        public string Cookies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SAMLToken {\n");
            sb.Append("  NotOnorafter: ").Append(NotOnorafter).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Rfc822Mailbox: ").Append(Rfc822Mailbox).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  MailAlternateAddress: ").Append(MailAlternateAddress).Append("\n");
            sb.Append("  EduPersonOrgDN: ").Append(EduPersonOrgDN).Append("\n");
            sb.Append("  EduPersonPrincipalName: ").Append(EduPersonPrincipalName).Append("\n");
            sb.Append("  IsMemberOf: ").Append(IsMemberOf).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EduPersonTargetedID: ").Append(EduPersonTargetedID).Append("\n");
            sb.Append("  Cookies: ").Append(Cookies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SAMLToken);
        }

        /// <summary>
        /// Returns true if SAMLToken instances are equal
        /// </summary>
        /// <param name="input">Instance of SAMLToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SAMLToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotOnorafter == input.NotOnorafter ||
                    (this.NotOnorafter != null &&
                    this.NotOnorafter.Equals(input.NotOnorafter))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Rfc822Mailbox == input.Rfc822Mailbox ||
                    (this.Rfc822Mailbox != null &&
                    this.Rfc822Mailbox.Equals(input.Rfc822Mailbox))
                ) && 
                (
                    this.NotBefore == input.NotBefore ||
                    (this.NotBefore != null &&
                    this.NotBefore.Equals(input.NotBefore))
                ) && 
                (
                    this.Userid == input.Userid ||
                    (this.Userid != null &&
                    this.Userid.Equals(input.Userid))
                ) && 
                (
                    this.MailAlternateAddress == input.MailAlternateAddress ||
                    (this.MailAlternateAddress != null &&
                    this.MailAlternateAddress.Equals(input.MailAlternateAddress))
                ) && 
                (
                    this.EduPersonOrgDN == input.EduPersonOrgDN ||
                    (this.EduPersonOrgDN != null &&
                    this.EduPersonOrgDN.Equals(input.EduPersonOrgDN))
                ) && 
                (
                    this.EduPersonPrincipalName == input.EduPersonPrincipalName ||
                    (this.EduPersonPrincipalName != null &&
                    this.EduPersonPrincipalName.Equals(input.EduPersonPrincipalName))
                ) && 
                (
                    this.IsMemberOf == input.IsMemberOf ||
                    this.IsMemberOf != null &&
                    input.IsMemberOf != null &&
                    this.IsMemberOf.SequenceEqual(input.IsMemberOf)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EduPersonTargetedID == input.EduPersonTargetedID ||
                    (this.EduPersonTargetedID != null &&
                    this.EduPersonTargetedID.Equals(input.EduPersonTargetedID))
                ) && 
                (
                    this.Cookies == input.Cookies ||
                    (this.Cookies != null &&
                    this.Cookies.Equals(input.Cookies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotOnorafter != null)
                    hashCode = hashCode * 59 + this.NotOnorafter.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.Rfc822Mailbox != null)
                    hashCode = hashCode * 59 + this.Rfc822Mailbox.GetHashCode();
                if (this.NotBefore != null)
                    hashCode = hashCode * 59 + this.NotBefore.GetHashCode();
                if (this.Userid != null)
                    hashCode = hashCode * 59 + this.Userid.GetHashCode();
                if (this.MailAlternateAddress != null)
                    hashCode = hashCode * 59 + this.MailAlternateAddress.GetHashCode();
                if (this.EduPersonOrgDN != null)
                    hashCode = hashCode * 59 + this.EduPersonOrgDN.GetHashCode();
                if (this.EduPersonPrincipalName != null)
                    hashCode = hashCode * 59 + this.EduPersonPrincipalName.GetHashCode();
                if (this.IsMemberOf != null)
                    hashCode = hashCode * 59 + this.IsMemberOf.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EduPersonTargetedID != null)
                    hashCode = hashCode * 59 + this.EduPersonTargetedID.GetHashCode();
                if (this.Cookies != null)
                    hashCode = hashCode * 59 + this.Cookies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
