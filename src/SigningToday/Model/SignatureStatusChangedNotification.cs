/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// SignatureStatusChangedNotification
    /// </summary>
    [DataContract]
    public partial class SignatureStatusChangedNotification :  IEquatable<SignatureStatusChangedNotification>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Performed for value: performed
            /// </summary>
            [EnumMember(Value = "performed")]
            Performed = 2,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,

            /// <summary>
            /// Enum Declined for value: declined
            /// </summary>
            [EnumMember(Value = "declined")]
            Declined = 5

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Fill for value: fill
            /// </summary>
            [EnumMember(Value = "fill")]
            Fill = 1,

            /// <summary>
            /// Enum Sign for value: sign
            /// </summary>
            [EnumMember(Value = "sign")]
            Sign = 2

        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureStatusChangedNotification" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="group">group.</param>
        /// <param name="action">action.</param>
        /// <param name="dst">dst.</param>
        /// <param name="fillableForm">fillableForm.</param>
        /// <param name="signature">signature.</param>
        /// <param name="signer">signer.</param>
        /// <param name="document">document.</param>
        /// <param name="automatic">automatic.</param>
        /// <param name="page">page.</param>
        public SignatureStatusChangedNotification(StatusEnum? status = default(StatusEnum?), int group = default(int), ActionEnum? action = default(ActionEnum?), SignatureStatusChangedNotificationDst dst = default(SignatureStatusChangedNotificationDst), FillableForm fillableForm = default(FillableForm), int signature = default(int), string signer = default(string), SignatureStatusChangedNotificationDocument document = default(SignatureStatusChangedNotificationDocument), bool automatic = default(bool), int page = default(int))
        {
            this.Status = status;
            this.Group = group;
            this.Action = action;
            this.Dst = dst;
            this.FillableForm = fillableForm;
            this.Signature = signature;
            this.Signer = signer;
            this.Document = document;
            this.Automatic = automatic;
            this.Page = page;
        }
        

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public int Group { get; set; }


        /// <summary>
        /// Gets or Sets Dst
        /// </summary>
        [DataMember(Name="dst", EmitDefaultValue=false)]
        public SignatureStatusChangedNotificationDst Dst { get; set; }

        /// <summary>
        /// Gets or Sets FillableForm
        /// </summary>
        [DataMember(Name="fillableForm", EmitDefaultValue=false)]
        public FillableForm FillableForm { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public int Signature { get; set; }

        /// <summary>
        /// Gets or Sets Signer
        /// </summary>
        [DataMember(Name="signer", EmitDefaultValue=false)]
        public string Signer { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=false)]
        public SignatureStatusChangedNotificationDocument Document { get; set; }

        /// <summary>
        /// Gets or Sets Automatic
        /// </summary>
        [DataMember(Name="automatic", EmitDefaultValue=false)]
        public bool Automatic { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatureStatusChangedNotification {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Dst: ").Append(Dst).Append("\n");
            sb.Append("  FillableForm: ").Append(FillableForm).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Signer: ").Append(Signer).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Automatic: ").Append(Automatic).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureStatusChangedNotification);
        }

        /// <summary>
        /// Returns true if SignatureStatusChangedNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureStatusChangedNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureStatusChangedNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Dst == input.Dst ||
                    (this.Dst != null &&
                    this.Dst.Equals(input.Dst))
                ) && 
                (
                    this.FillableForm == input.FillableForm ||
                    (this.FillableForm != null &&
                    this.FillableForm.Equals(input.FillableForm))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Signer == input.Signer ||
                    (this.Signer != null &&
                    this.Signer.Equals(input.Signer))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.Automatic == input.Automatic ||
                    (this.Automatic != null &&
                    this.Automatic.Equals(input.Automatic))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Dst != null)
                    hashCode = hashCode * 59 + this.Dst.GetHashCode();
                if (this.FillableForm != null)
                    hashCode = hashCode * 59 + this.FillableForm.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.Signer != null)
                    hashCode = hashCode * 59 + this.Signer.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.Automatic != null)
                    hashCode = hashCode * 59 + this.Automatic.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
