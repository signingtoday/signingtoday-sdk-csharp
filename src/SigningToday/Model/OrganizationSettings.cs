/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// OrganizationSettings
    /// </summary>
    [DataContract]
    public partial class OrganizationSettings :  IEquatable<OrganizationSettings>, IValidatableObject
    {
        /// <summary>
        /// Defines DefaultLanguage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultLanguageEnum
        {
            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 1,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 2,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 3,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 4

        }

        /// <summary>
        /// Gets or Sets DefaultLanguage
        /// </summary>
        [DataMember(Name="defaultLanguage", EmitDefaultValue=false)]
        public DefaultLanguageEnum? DefaultLanguage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettings" /> class.
        /// </summary>
        /// <param name="defaultDSTExpireDays">defaultDSTExpireDays (default to 30).</param>
        /// <param name="defaultLanguage">defaultLanguage.</param>
        /// <param name="alfrescoProperties">alfrescoProperties.</param>
        public OrganizationSettings(int defaultDSTExpireDays = 30, DefaultLanguageEnum? defaultLanguage = default(DefaultLanguageEnum?), OrganizationSettingsAlfrescoProperties alfrescoProperties = default(OrganizationSettingsAlfrescoProperties))
        {
            // use default value if no "defaultDSTExpireDays" provided
            if (defaultDSTExpireDays == null)
            {
                this.DefaultDSTExpireDays = 30;
            }
            else
            {
                this.DefaultDSTExpireDays = defaultDSTExpireDays;
            }
            this.DefaultLanguage = defaultLanguage;
            this.AlfrescoProperties = alfrescoProperties;
        }
        
        /// <summary>
        /// Gets or Sets DefaultDSTExpireDays
        /// </summary>
        [DataMember(Name="defaultDSTExpire_days", EmitDefaultValue=false)]
        public int DefaultDSTExpireDays { get; set; }


        /// <summary>
        /// Gets or Sets AlfrescoProperties
        /// </summary>
        [DataMember(Name="alfrescoProperties", EmitDefaultValue=false)]
        public OrganizationSettingsAlfrescoProperties AlfrescoProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationSettings {\n");
            sb.Append("  DefaultDSTExpireDays: ").Append(DefaultDSTExpireDays).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  AlfrescoProperties: ").Append(AlfrescoProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationSettings);
        }

        /// <summary>
        /// Returns true if OrganizationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultDSTExpireDays == input.DefaultDSTExpireDays ||
                    (this.DefaultDSTExpireDays != null &&
                    this.DefaultDSTExpireDays.Equals(input.DefaultDSTExpireDays))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.AlfrescoProperties == input.AlfrescoProperties ||
                    (this.AlfrescoProperties != null &&
                    this.AlfrescoProperties.Equals(input.AlfrescoProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultDSTExpireDays != null)
                    hashCode = hashCode * 59 + this.DefaultDSTExpireDays.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.AlfrescoProperties != null)
                    hashCode = hashCode * 59 + this.AlfrescoProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
