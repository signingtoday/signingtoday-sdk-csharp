/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// AuditRecord
    /// </summary>
    [DataContract]
    public partial class AuditRecord :  IEquatable<AuditRecord>, IValidatableObject
    {
        /// <summary>
        /// Defines Event
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            /// <summary>
            /// Enum Eventpublished for value: event_published
            /// </summary>
            [EnumMember(Value = "event_published")]
            Eventpublished = 1,

            /// <summary>
            /// Enum Eventformfill for value: event_form_fill
            /// </summary>
            [EnumMember(Value = "event_form_fill")]
            Eventformfill = 2,

            /// <summary>
            /// Enum Eventsignature for value: event_signature
            /// </summary>
            [EnumMember(Value = "event_signature")]
            Eventsignature = 3,

            /// <summary>
            /// Enum Eventrejection for value: event_rejection
            /// </summary>
            [EnumMember(Value = "event_rejection")]
            Eventrejection = 4,

            /// <summary>
            /// Enum Eventreplacement for value: event_replacement
            /// </summary>
            [EnumMember(Value = "event_replacement")]
            Eventreplacement = 5,

            /// <summary>
            /// Enum Eventnoteadd for value: event_note_add
            /// </summary>
            [EnumMember(Value = "event_note_add")]
            Eventnoteadd = 6,

            /// <summary>
            /// Enum Eventnotemodify for value: event_note_modify
            /// </summary>
            [EnumMember(Value = "event_note_modify")]
            Eventnotemodify = 7,

            /// <summary>
            /// Enum Eventnotedelete for value: event_note_delete
            /// </summary>
            [EnumMember(Value = "event_note_delete")]
            Eventnotedelete = 8,

            /// <summary>
            /// Enum Eventsolicitation for value: event_solicitation
            /// </summary>
            [EnumMember(Value = "event_solicitation")]
            Eventsolicitation = 9,

            /// <summary>
            /// Enum Stagetofill for value: stage_to_fill
            /// </summary>
            [EnumMember(Value = "stage_to_fill")]
            Stagetofill = 10,

            /// <summary>
            /// Enum Stagetosign for value: stage_to_sign
            /// </summary>
            [EnumMember(Value = "stage_to_sign")]
            Stagetosign = 11,

            /// <summary>
            /// Enum Stageexpired for value: stage_expired
            /// </summary>
            [EnumMember(Value = "stage_expired")]
            Stageexpired = 12,

            /// <summary>
            /// Enum Stagesigned for value: stage_signed
            /// </summary>
            [EnumMember(Value = "stage_signed")]
            Stagesigned = 13,

            /// <summary>
            /// Enum Stagerejected for value: stage_rejected
            /// </summary>
            [EnumMember(Value = "stage_rejected")]
            Stagerejected = 14,

            /// <summary>
            /// Enum Eventuploadalfresco for value: event_upload_alfresco
            /// </summary>
            [EnumMember(Value = "event_upload_alfresco")]
            Eventuploadalfresco = 15

        }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public EventEnum? Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditRecord" /> class.
        /// </summary>
        /// <param name="at">at.</param>
        /// <param name="_event">_event.</param>
        /// <param name="signer">signer.</param>
        /// <param name="value">value.</param>
        /// <param name="dstId">dstId.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="fillableFormId">fillableFormId.</param>
        /// <param name="signatureRequestId">signatureRequestId.</param>
        /// <param name="noteId">noteId.</param>
        public AuditRecord(DateTime at = default(DateTime), EventEnum? _event = default(EventEnum?), SignerRecord signer = default(SignerRecord), string value = default(string), Guid dstId = default(Guid), int documentId = default(int), int fillableFormId = default(int), int signatureRequestId = default(int), long noteId = default(long))
        {
            this.At = at;
            this.Event = _event;
            this.Signer = signer;
            this.Value = value;
            this.DstId = dstId;
            this.DocumentId = documentId;
            this.FillableFormId = fillableFormId;
            this.SignatureRequestId = signatureRequestId;
            this.NoteId = noteId;
        }
        
        /// <summary>
        /// It is a reference for internal use
        /// </summary>
        /// <value>It is a reference for internal use</value>
        [DataMember(Name="_instance_id", EmitDefaultValue=false)]
        public long InstanceId { get; private set; }

        /// <summary>
        /// Gets or Sets At
        /// </summary>
        [DataMember(Name="at", EmitDefaultValue=false)]
        public DateTime At { get; set; }


        /// <summary>
        /// Gets or Sets Signer
        /// </summary>
        [DataMember(Name="signer", EmitDefaultValue=false)]
        public SignerRecord Signer { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets DstId
        /// </summary>
        [DataMember(Name="dstId", EmitDefaultValue=false)]
        public Guid DstId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets FillableFormId
        /// </summary>
        [DataMember(Name="fillableFormId", EmitDefaultValue=false)]
        public int FillableFormId { get; set; }

        /// <summary>
        /// Gets or Sets SignatureRequestId
        /// </summary>
        [DataMember(Name="signatureRequestId", EmitDefaultValue=false)]
        public int SignatureRequestId { get; set; }

        /// <summary>
        /// Gets or Sets NoteId
        /// </summary>
        [DataMember(Name="noteId", EmitDefaultValue=false)]
        public long NoteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditRecord {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Signer: ").Append(Signer).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DstId: ").Append(DstId).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FillableFormId: ").Append(FillableFormId).Append("\n");
            sb.Append("  SignatureRequestId: ").Append(SignatureRequestId).Append("\n");
            sb.Append("  NoteId: ").Append(NoteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditRecord);
        }

        /// <summary>
        /// Returns true if AuditRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Signer == input.Signer ||
                    (this.Signer != null &&
                    this.Signer.Equals(input.Signer))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DstId == input.DstId ||
                    (this.DstId != null &&
                    this.DstId.Equals(input.DstId))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.FillableFormId == input.FillableFormId ||
                    (this.FillableFormId != null &&
                    this.FillableFormId.Equals(input.FillableFormId))
                ) && 
                (
                    this.SignatureRequestId == input.SignatureRequestId ||
                    (this.SignatureRequestId != null &&
                    this.SignatureRequestId.Equals(input.SignatureRequestId))
                ) && 
                (
                    this.NoteId == input.NoteId ||
                    (this.NoteId != null &&
                    this.NoteId.Equals(input.NoteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.At != null)
                    hashCode = hashCode * 59 + this.At.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Signer != null)
                    hashCode = hashCode * 59 + this.Signer.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.DstId != null)
                    hashCode = hashCode * 59 + this.DstId.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.FillableFormId != null)
                    hashCode = hashCode * 59 + this.FillableFormId.GetHashCode();
                if (this.SignatureRequestId != null)
                    hashCode = hashCode * 59 + this.SignatureRequestId.GetHashCode();
                if (this.NoteId != null)
                    hashCode = hashCode * 59 + this.NoteId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
