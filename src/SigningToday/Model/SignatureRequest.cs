/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// The association with the document is hold in the extraData of the FillableForm.
    /// </summary>
    [DataContract]
    public partial class SignatureRequest :  IEquatable<SignatureRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines SignProfile
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignProfileEnum
        {
            /// <summary>
            /// Enum CAdES for value: CAdES
            /// </summary>
            [EnumMember(Value = "CAdES")]
            CAdES = 1,

            /// <summary>
            /// Enum PAdES for value: PAdES
            /// </summary>
            [EnumMember(Value = "PAdES")]
            PAdES = 2

        }

        /// <summary>
        /// Gets or Sets SignProfile
        /// </summary>
        [DataMember(Name="signProfile", EmitDefaultValue=false)]
        public SignProfileEnum? SignProfile { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequest" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="reason">reason.</param>
        /// <param name="description">description.</param>
        /// <param name="signerId">signerId.</param>
        /// <param name="signProfile">signProfile.</param>
        /// <param name="withTimestamp">withTimestamp.</param>
        /// <param name="declinable">declinable.</param>
        /// <param name="restrictions">restrictions.</param>
        /// <param name="extraData">extraData.</param>
        public SignatureRequest(int id = default(int), string reason = default(string), string description = default(string), int signerId = default(int), SignProfileEnum? signProfile = default(SignProfileEnum?), bool withTimestamp = default(bool), bool declinable = default(bool), List<SignatureRestriction> restrictions = default(List<SignatureRestriction>), Dictionary<string, Object> extraData = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.Reason = reason;
            this.Description = description;
            this.SignerId = signerId;
            this.SignProfile = signProfile;
            this.WithTimestamp = withTimestamp;
            this.Declinable = declinable;
            this.Restrictions = restrictions;
            this.ExtraData = extraData;
        }
        
        /// <summary>
        /// It is a reference for internal use
        /// </summary>
        /// <value>It is a reference for internal use</value>
        [DataMember(Name="_instance_id", EmitDefaultValue=false)]
        public long InstanceId { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SignerId
        /// </summary>
        [DataMember(Name="signerId", EmitDefaultValue=false)]
        public int SignerId { get; set; }


        /// <summary>
        /// Gets or Sets WithTimestamp
        /// </summary>
        [DataMember(Name="withTimestamp", EmitDefaultValue=false)]
        public bool WithTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Declinable
        /// </summary>
        [DataMember(Name="declinable", EmitDefaultValue=false)]
        public bool Declinable { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name="restrictions", EmitDefaultValue=false)]
        public List<SignatureRestriction> Restrictions { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name="extraData", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatureRequest {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SignerId: ").Append(SignerId).Append("\n");
            sb.Append("  SignProfile: ").Append(SignProfile).Append("\n");
            sb.Append("  WithTimestamp: ").Append(WithTimestamp).Append("\n");
            sb.Append("  Declinable: ").Append(Declinable).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureRequest);
        }

        /// <summary>
        /// Returns true if SignatureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SignerId == input.SignerId ||
                    (this.SignerId != null &&
                    this.SignerId.Equals(input.SignerId))
                ) && 
                (
                    this.SignProfile == input.SignProfile ||
                    (this.SignProfile != null &&
                    this.SignProfile.Equals(input.SignProfile))
                ) && 
                (
                    this.WithTimestamp == input.WithTimestamp ||
                    (this.WithTimestamp != null &&
                    this.WithTimestamp.Equals(input.WithTimestamp))
                ) && 
                (
                    this.Declinable == input.Declinable ||
                    (this.Declinable != null &&
                    this.Declinable.Equals(input.Declinable))
                ) && 
                (
                    this.Restrictions == input.Restrictions ||
                    this.Restrictions != null &&
                    input.Restrictions != null &&
                    this.Restrictions.SequenceEqual(input.Restrictions)
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    input.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SignerId != null)
                    hashCode = hashCode * 59 + this.SignerId.GetHashCode();
                if (this.SignProfile != null)
                    hashCode = hashCode * 59 + this.SignProfile.GetHashCode();
                if (this.WithTimestamp != null)
                    hashCode = hashCode * 59 + this.WithTimestamp.GetHashCode();
                if (this.Declinable != null)
                    hashCode = hashCode * 59 + this.Declinable.GetHashCode();
                if (this.Restrictions != null)
                    hashCode = hashCode * 59 + this.Restrictions.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
