/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// The _DSTNote_ represents a text note that can be attached to a DST whenever an entitled user needs it (when requesting for clarifications, informing of the proceedings, adding context) 
    /// </summary>
    [DataContract]
    public partial class DSTNote :  IEquatable<DSTNote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSTNote" /> class.
        /// </summary>
        /// <param name="id">The id of the note.</param>
        /// <param name="dstId">The _UUID_ code of the Digital Signature Transaction.</param>
        /// <param name="userId">The _UUID_ code of the user which created the _Note_.</param>
        /// <param name="createdAt">The _data-time_ of the note creation.</param>
        /// <param name="text">Actual content of the _DST Note_.</param>
        public DSTNote(long id = default(long), Guid dstId = default(Guid), Guid userId = default(Guid), DateTime createdAt = default(DateTime), string text = default(string))
        {
            this.Id = id;
            this.DstId = dstId;
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.Text = text;
        }
        
        /// <summary>
        /// The id of the note
        /// </summary>
        /// <value>The id of the note</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// The _UUID_ code of the Digital Signature Transaction
        /// </summary>
        /// <value>The _UUID_ code of the Digital Signature Transaction</value>
        [DataMember(Name="dstId", EmitDefaultValue=false)]
        public Guid DstId { get; set; }

        /// <summary>
        /// The _UUID_ code of the user which created the _Note_
        /// </summary>
        /// <value>The _UUID_ code of the user which created the _Note_</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// The _data-time_ of the note creation
        /// </summary>
        /// <value>The _data-time_ of the note creation</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Actual content of the _DST Note_
        /// </summary>
        /// <value>Actual content of the _DST Note_</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSTNote {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DstId: ").Append(DstId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DSTNote);
        }

        /// <summary>
        /// Returns true if DSTNote instances are equal
        /// </summary>
        /// <param name="input">Instance of DSTNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSTNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DstId == input.DstId ||
                    (this.DstId != null &&
                    this.DstId.Equals(input.DstId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DstId != null)
                    hashCode = hashCode * 59 + this.DstId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
