/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// NotificationEvent
    /// </summary>
    [DataContract]
    public partial class NotificationEvent :  IEquatable<NotificationEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines Event
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            /// <summary>
            /// Enum Statuspublished for value: dst_status_published
            /// </summary>
            [EnumMember(Value = "dst_status_published")]
            Statuspublished = 1,

            /// <summary>
            /// Enum Statusexpired for value: dst_status_expired
            /// </summary>
            [EnumMember(Value = "dst_status_expired")]
            Statusexpired = 2,

            /// <summary>
            /// Enum Statusrejected for value: dst_status_rejected
            /// </summary>
            [EnumMember(Value = "dst_status_rejected")]
            Statusrejected = 3,

            /// <summary>
            /// Enum Statussigned for value: dst_status_signed
            /// </summary>
            [EnumMember(Value = "dst_status_signed")]
            Statussigned = 4,

            /// <summary>
            /// Enum Statuserror for value: dst_status_error
            /// </summary>
            [EnumMember(Value = "dst_status_error")]
            Statuserror = 5,

            /// <summary>
            /// Enum Alertfill for value: dst_alert_fill
            /// </summary>
            [EnumMember(Value = "dst_alert_fill")]
            Alertfill = 6,

            /// <summary>
            /// Enum Alertsign for value: dst_alert_sign
            /// </summary>
            [EnumMember(Value = "dst_alert_sign")]
            Alertsign = 7,

            /// <summary>
            /// Enum Alertnoteadded for value: dst_alert_note_added
            /// </summary>
            [EnumMember(Value = "dst_alert_note_added")]
            Alertnoteadded = 8,

            /// <summary>
            /// Enum Alertnotemodified for value: dst_alert_note_modified
            /// </summary>
            [EnumMember(Value = "dst_alert_note_modified")]
            Alertnotemodified = 9,

            /// <summary>
            /// Enum Alertnotedeleted for value: dst_alert_note_deleted
            /// </summary>
            [EnumMember(Value = "dst_alert_note_deleted")]
            Alertnotedeleted = 10

        }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public EventEnum? Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEvent" /> class.
        /// </summary>
        /// <param name="dstTitle">dstTitle.</param>
        /// <param name="username">If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials) .</param>
        /// <param name="email">email.</param>
        public NotificationEvent(string dstTitle = default(string), string username = default(string), string email = default(string))
        {
            this.DstTitle = dstTitle;
            this.Username = username;
            this.Email = email;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; private set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; private set; }

        /// <summary>
        /// Gets or Sets DstId
        /// </summary>
        [DataMember(Name="dstId", EmitDefaultValue=false)]
        public Guid DstId { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public Guid UserId { get; private set; }

        /// <summary>
        /// Gets or Sets DstTitle
        /// </summary>
        [DataMember(Name="dstTitle", EmitDefaultValue=false)]
        public string DstTitle { get; set; }

        /// <summary>
        /// If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials) 
        /// </summary>
        /// <value>If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials) </value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  DstId: ").Append(DstId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DstTitle: ").Append(DstTitle).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationEvent);
        }

        /// <summary>
        /// Returns true if NotificationEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.DstId == input.DstId ||
                    (this.DstId != null &&
                    this.DstId.Equals(input.DstId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.DstTitle == input.DstTitle ||
                    (this.DstTitle != null &&
                    this.DstTitle.Equals(input.DstTitle))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.DstId != null)
                    hashCode = hashCode * 59 + this.DstId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.DstTitle != null)
                    hashCode = hashCode * 59 + this.DstTitle.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
