/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// The data the application will use to authenticate itself wherever there will be the need, for example in order to access to a resource
    /// </summary>
    [DataContract]
    public partial class RobotConfigurationAuthentication :  IEquatable<RobotConfigurationAuthentication>, IValidatableObject
    {
        /// <summary>
        /// The type of authentication
        /// </summary>
        /// <value>The type of authentication</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthModeEnum
        {
            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 1,

            /// <summary>
            /// Enum Digest for value: digest
            /// </summary>
            [EnumMember(Value = "digest")]
            Digest = 2

        }

        /// <summary>
        /// The type of authentication
        /// </summary>
        /// <value>The type of authentication</value>
        [DataMember(Name="authMode", EmitDefaultValue=false)]
        public AuthModeEnum? AuthMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotConfigurationAuthentication" /> class.
        /// </summary>
        /// <param name="username">The username for the authentication.</param>
        /// <param name="password">The password for the authentication.</param>
        /// <param name="authMode">The type of authentication.</param>
        /// <param name="clientKey">Client key.</param>
        /// <param name="clientCert">Client certificate.</param>
        public RobotConfigurationAuthentication(string username = default(string), string password = default(string), AuthModeEnum? authMode = default(AuthModeEnum?), string clientKey = default(string), string clientCert = default(string))
        {
            this.Username = username;
            this.Password = password;
            this.AuthMode = authMode;
            this.ClientKey = clientKey;
            this.ClientCert = clientCert;
        }
        
        /// <summary>
        /// The username for the authentication
        /// </summary>
        /// <value>The username for the authentication</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The password for the authentication
        /// </summary>
        /// <value>The password for the authentication</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// Client key
        /// </summary>
        /// <value>Client key</value>
        [DataMember(Name="clientKey", EmitDefaultValue=false)]
        public string ClientKey { get; set; }

        /// <summary>
        /// Client certificate
        /// </summary>
        /// <value>Client certificate</value>
        [DataMember(Name="clientCert", EmitDefaultValue=false)]
        public string ClientCert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RobotConfigurationAuthentication {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AuthMode: ").Append(AuthMode).Append("\n");
            sb.Append("  ClientKey: ").Append(ClientKey).Append("\n");
            sb.Append("  ClientCert: ").Append(ClientCert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RobotConfigurationAuthentication);
        }

        /// <summary>
        /// Returns true if RobotConfigurationAuthentication instances are equal
        /// </summary>
        /// <param name="input">Instance of RobotConfigurationAuthentication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RobotConfigurationAuthentication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AuthMode == input.AuthMode ||
                    (this.AuthMode != null &&
                    this.AuthMode.Equals(input.AuthMode))
                ) && 
                (
                    this.ClientKey == input.ClientKey ||
                    (this.ClientKey != null &&
                    this.ClientKey.Equals(input.ClientKey))
                ) && 
                (
                    this.ClientCert == input.ClientCert ||
                    (this.ClientCert != null &&
                    this.ClientCert.Equals(input.ClientCert))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AuthMode != null)
                    hashCode = hashCode * 59 + this.AuthMode.GetHashCode();
                if (this.ClientKey != null)
                    hashCode = hashCode * 59 + this.ClientKey.GetHashCode();
                if (this.ClientCert != null)
                    hashCode = hashCode * 59 + this.ClientCert.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
