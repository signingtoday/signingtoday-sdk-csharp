/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract]
    public partial class Document :  IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed 
        /// </summary>
        /// <value>The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Plain for value: plain
            /// </summary>
            [EnumMember(Value = "plain")]
            Plain = 1,

            /// <summary>
            /// Enum Filled for value: filled
            /// </summary>
            [EnumMember(Value = "filled")]
            Filled = 2,

            /// <summary>
            /// Enum Signed for value: signed
            /// </summary>
            [EnumMember(Value = "signed")]
            Signed = 3

        }

        /// <summary>
        /// The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed 
        /// </summary>
        /// <value>The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="id">Unique Id of the document.</param>
        /// <param name="plainDocumentUuid">Id of the associated Resource (plain PDF file e.g. the one uploaded by the user).</param>
        /// <param name="forms">The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields.</param>
        /// <param name="signatureRequests">The list of signature request of the document.</param>
        /// <param name="signerGroups">The sign plan for the document.</param>
        public Document(int id = default(int), Guid plainDocumentUuid = default(Guid), List<FillableForm> forms = default(List<FillableForm>), List<SignatureRequest> signatureRequests = default(List<SignatureRequest>), List<SignersGroup> signerGroups = default(List<SignersGroup>))
        {
            this.Id = id;
            this.PlainDocumentUuid = plainDocumentUuid;
            this.Forms = forms;
            this.SignatureRequests = signatureRequests;
            this.SignerGroups = signerGroups;
        }
        
        /// <summary>
        /// It is a reference for internal use
        /// </summary>
        /// <value>It is a reference for internal use</value>
        [DataMember(Name="_instance_id", EmitDefaultValue=false)]
        public long InstanceId { get; private set; }

        /// <summary>
        /// Unique Id of the document
        /// </summary>
        /// <value>Unique Id of the document</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)
        /// </summary>
        /// <value>Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)</value>
        [DataMember(Name="plainDocumentUuid", EmitDefaultValue=false)]
        public Guid PlainDocumentUuid { get; set; }

        /// <summary>
        /// Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)
        /// </summary>
        /// <value>Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)</value>
        [DataMember(Name="filledDocumentUuid", EmitDefaultValue=false)]
        public Guid FilledDocumentUuid { get; private set; }

        /// <summary>
        /// Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)
        /// </summary>
        /// <value>Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)</value>
        [DataMember(Name="signedDocumentUuid", EmitDefaultValue=false)]
        public Guid SignedDocumentUuid { get; private set; }


        /// <summary>
        /// The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields
        /// </summary>
        /// <value>The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields</value>
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public List<FillableForm> Forms { get; set; }

        /// <summary>
        /// The list of signature request of the document
        /// </summary>
        /// <value>The list of signature request of the document</value>
        [DataMember(Name="signatureRequests", EmitDefaultValue=false)]
        public List<SignatureRequest> SignatureRequests { get; set; }

        /// <summary>
        /// The sign plan for the document
        /// </summary>
        /// <value>The sign plan for the document</value>
        [DataMember(Name="signerGroups", EmitDefaultValue=false)]
        public List<SignersGroup> SignerGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlainDocumentUuid: ").Append(PlainDocumentUuid).Append("\n");
            sb.Append("  FilledDocumentUuid: ").Append(FilledDocumentUuid).Append("\n");
            sb.Append("  SignedDocumentUuid: ").Append(SignedDocumentUuid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  SignatureRequests: ").Append(SignatureRequests).Append("\n");
            sb.Append("  SignerGroups: ").Append(SignerGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PlainDocumentUuid == input.PlainDocumentUuid ||
                    (this.PlainDocumentUuid != null &&
                    this.PlainDocumentUuid.Equals(input.PlainDocumentUuid))
                ) && 
                (
                    this.FilledDocumentUuid == input.FilledDocumentUuid ||
                    (this.FilledDocumentUuid != null &&
                    this.FilledDocumentUuid.Equals(input.FilledDocumentUuid))
                ) && 
                (
                    this.SignedDocumentUuid == input.SignedDocumentUuid ||
                    (this.SignedDocumentUuid != null &&
                    this.SignedDocumentUuid.Equals(input.SignedDocumentUuid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Forms == input.Forms ||
                    this.Forms != null &&
                    input.Forms != null &&
                    this.Forms.SequenceEqual(input.Forms)
                ) && 
                (
                    this.SignatureRequests == input.SignatureRequests ||
                    this.SignatureRequests != null &&
                    input.SignatureRequests != null &&
                    this.SignatureRequests.SequenceEqual(input.SignatureRequests)
                ) && 
                (
                    this.SignerGroups == input.SignerGroups ||
                    this.SignerGroups != null &&
                    input.SignerGroups != null &&
                    this.SignerGroups.SequenceEqual(input.SignerGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PlainDocumentUuid != null)
                    hashCode = hashCode * 59 + this.PlainDocumentUuid.GetHashCode();
                if (this.FilledDocumentUuid != null)
                    hashCode = hashCode * 59 + this.FilledDocumentUuid.GetHashCode();
                if (this.SignedDocumentUuid != null)
                    hashCode = hashCode * 59 + this.SignedDocumentUuid.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Forms != null)
                    hashCode = hashCode * 59 + this.Forms.GetHashCode();
                if (this.SignatureRequests != null)
                    hashCode = hashCode * 59 + this.SignatureRequests.GetHashCode();
                if (this.SignerGroups != null)
                    hashCode = hashCode * 59 + this.SignerGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
