/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// Identity
    /// </summary>
    [DataContract]
    public partial class Identity :  IEquatable<Identity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identity" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="actions">actions.</param>
        /// <param name="provider">provider.</param>
        /// <param name="label">label.</param>
        /// <param name="providerType">providerType.</param>
        /// <param name="subjectCommonName">subjectCommonName.</param>
        /// <param name="issuerCommonName">issuerCommonName.</param>
        /// <param name="expireDate">expireDate.</param>
        /// <param name="rawCertificate">rawCertificate.</param>
        /// <param name="appearance">appearance.</param>
        /// <param name="providerData">providerData.</param>
        /// <param name="valid">valid.</param>
        /// <param name="tags">tags.</param>
        public Identity(Guid id = default(Guid), Dictionary<string, string> actions = default(Dictionary<string, string>), string provider = default(string), string label = default(string), string providerType = default(string), string subjectCommonName = default(string), string issuerCommonName = default(string), DateTime expireDate = default(DateTime), string rawCertificate = default(string), LFResource appearance = default(LFResource), IdentityProviderData providerData = default(IdentityProviderData), bool valid = default(bool), List<string> tags = default(List<string>))
        {
            this.Id = id;
            this.Actions = actions;
            this.Provider = provider;
            this.Label = label;
            this.ProviderType = providerType;
            this.SubjectCommonName = subjectCommonName;
            this.IssuerCommonName = issuerCommonName;
            this.ExpireDate = expireDate;
            this.RawCertificate = rawCertificate;
            this.Appearance = appearance;
            this.ProviderData = providerData;
            this.Valid = valid;
            this.Tags = tags;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public Dictionary<string, string> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets ProviderType
        /// </summary>
        [DataMember(Name="providerType", EmitDefaultValue=false)]
        public string ProviderType { get; set; }

        /// <summary>
        /// Gets or Sets SubjectCommonName
        /// </summary>
        [DataMember(Name="subjectCommonName", EmitDefaultValue=false)]
        public string SubjectCommonName { get; set; }

        /// <summary>
        /// Gets or Sets IssuerCommonName
        /// </summary>
        [DataMember(Name="issuerCommonName", EmitDefaultValue=false)]
        public string IssuerCommonName { get; set; }

        /// <summary>
        /// Gets or Sets ExpireDate
        /// </summary>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public DateTime ExpireDate { get; set; }

        /// <summary>
        /// Gets or Sets RawCertificate
        /// </summary>
        [DataMember(Name="rawCertificate", EmitDefaultValue=false)]
        public string RawCertificate { get; set; }

        /// <summary>
        /// Gets or Sets Appearance
        /// </summary>
        [DataMember(Name="appearance", EmitDefaultValue=false)]
        public LFResource Appearance { get; set; }

        /// <summary>
        /// Gets or Sets ProviderData
        /// </summary>
        [DataMember(Name="providerData", EmitDefaultValue=false)]
        public IdentityProviderData ProviderData { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("  SubjectCommonName: ").Append(SubjectCommonName).Append("\n");
            sb.Append("  IssuerCommonName: ").Append(IssuerCommonName).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  RawCertificate: ").Append(RawCertificate).Append("\n");
            sb.Append("  Appearance: ").Append(Appearance).Append("\n");
            sb.Append("  ProviderData: ").Append(ProviderData).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identity);
        }

        /// <summary>
        /// Returns true if Identity instances are equal
        /// </summary>
        /// <param name="input">Instance of Identity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.ProviderType == input.ProviderType ||
                    (this.ProviderType != null &&
                    this.ProviderType.Equals(input.ProviderType))
                ) && 
                (
                    this.SubjectCommonName == input.SubjectCommonName ||
                    (this.SubjectCommonName != null &&
                    this.SubjectCommonName.Equals(input.SubjectCommonName))
                ) && 
                (
                    this.IssuerCommonName == input.IssuerCommonName ||
                    (this.IssuerCommonName != null &&
                    this.IssuerCommonName.Equals(input.IssuerCommonName))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.RawCertificate == input.RawCertificate ||
                    (this.RawCertificate != null &&
                    this.RawCertificate.Equals(input.RawCertificate))
                ) && 
                (
                    this.Appearance == input.Appearance ||
                    (this.Appearance != null &&
                    this.Appearance.Equals(input.Appearance))
                ) && 
                (
                    this.ProviderData == input.ProviderData ||
                    (this.ProviderData != null &&
                    this.ProviderData.Equals(input.ProviderData))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.ProviderType != null)
                    hashCode = hashCode * 59 + this.ProviderType.GetHashCode();
                if (this.SubjectCommonName != null)
                    hashCode = hashCode * 59 + this.SubjectCommonName.GetHashCode();
                if (this.IssuerCommonName != null)
                    hashCode = hashCode * 59 + this.IssuerCommonName.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.RawCertificate != null)
                    hashCode = hashCode * 59 + this.RawCertificate.GetHashCode();
                if (this.Appearance != null)
                    hashCode = hashCode * 59 + this.Appearance.GetHashCode();
                if (this.ProviderData != null)
                    hashCode = hashCode * 59 + this.ProviderData.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
