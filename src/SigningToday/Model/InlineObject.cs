/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// InlineObject
    /// </summary>
    [DataContract]
    public partial class InlineObject :  IEquatable<InlineObject>, IValidatableObject
    {
        /// <summary>
        /// The role of the user in the organization
        /// </summary>
        /// <value>The role of the user in the organization</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrgRoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,

            /// <summary>
            /// Enum Instructor for value: instructor
            /// </summary>
            [EnumMember(Value = "instructor")]
            Instructor = 2,

            /// <summary>
            /// Enum Signer for value: signer
            /// </summary>
            [EnumMember(Value = "signer")]
            Signer = 3

        }

        /// <summary>
        /// The role of the user in the organization
        /// </summary>
        /// <value>The role of the user in the organization</value>
        [DataMember(Name="orgRole", EmitDefaultValue=false)]
        public OrgRoleEnum? OrgRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject" /> class.
        /// </summary>
        /// <param name="eduPersonPrincipalName">The username of the account.</param>
        /// <param name="isMemberOf">Memberships of the user.</param>
        /// <param name="givenName">First name of the user.</param>
        /// <param name="surname">Last name of the user.</param>
        /// <param name="orgRole">The role of the user in the organization.</param>
        public InlineObject(string eduPersonPrincipalName = default(string), List<string> isMemberOf = default(List<string>), string givenName = default(string), string surname = default(string), OrgRoleEnum? orgRole = default(OrgRoleEnum?))
        {
            this.EduPersonPrincipalName = eduPersonPrincipalName;
            this.IsMemberOf = isMemberOf;
            this.GivenName = givenName;
            this.Surname = surname;
            this.OrgRole = orgRole;
        }
        
        /// <summary>
        /// The username of the account
        /// </summary>
        /// <value>The username of the account</value>
        [DataMember(Name="eduPersonPrincipalName", EmitDefaultValue=false)]
        public string EduPersonPrincipalName { get; set; }

        /// <summary>
        /// Memberships of the user
        /// </summary>
        /// <value>Memberships of the user</value>
        [DataMember(Name="isMemberOf", EmitDefaultValue=false)]
        public List<string> IsMemberOf { get; set; }

        /// <summary>
        /// First name of the user
        /// </summary>
        /// <value>First name of the user</value>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Last name of the user
        /// </summary>
        /// <value>Last name of the user</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject {\n");
            sb.Append("  EduPersonPrincipalName: ").Append(EduPersonPrincipalName).Append("\n");
            sb.Append("  IsMemberOf: ").Append(IsMemberOf).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  OrgRole: ").Append(OrgRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject);
        }

        /// <summary>
        /// Returns true if InlineObject instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EduPersonPrincipalName == input.EduPersonPrincipalName ||
                    (this.EduPersonPrincipalName != null &&
                    this.EduPersonPrincipalName.Equals(input.EduPersonPrincipalName))
                ) && 
                (
                    this.IsMemberOf == input.IsMemberOf ||
                    this.IsMemberOf != null &&
                    input.IsMemberOf != null &&
                    this.IsMemberOf.SequenceEqual(input.IsMemberOf)
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.OrgRole == input.OrgRole ||
                    (this.OrgRole != null &&
                    this.OrgRole.Equals(input.OrgRole))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EduPersonPrincipalName != null)
                    hashCode = hashCode * 59 + this.EduPersonPrincipalName.GetHashCode();
                if (this.IsMemberOf != null)
                    hashCode = hashCode * 59 + this.IsMemberOf.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.OrgRole != null)
                    hashCode = hashCode * 59 + this.OrgRole.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
