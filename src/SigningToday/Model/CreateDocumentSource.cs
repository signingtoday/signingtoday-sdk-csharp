/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// CreateDocumentSource
    /// </summary>
    [DataContract]
    public partial class CreateDocumentSource :  IEquatable<CreateDocumentSource>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Embedded for value: Embedded
            /// </summary>
            [EnumMember(Value = "Embedded")]
            Embedded = 1,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 2

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDocumentSource" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="embeddedData">embeddedData.</param>
        /// <param name="sourceURL">sourceURL.</param>
        public CreateDocumentSource(TypeEnum? type = default(TypeEnum?), System.IO.Stream embeddedData = default(System.IO.Stream), string sourceURL = default(string))
        {
            this.Type = type;
            this.EmbeddedData = embeddedData;
            this.SourceURL = sourceURL;
        }
        

        /// <summary>
        /// Gets or Sets EmbeddedData
        /// </summary>
        [DataMember(Name="embeddedData", EmitDefaultValue=false)]
        public System.IO.Stream EmbeddedData { get; set; }

        /// <summary>
        /// Gets or Sets SourceURL
        /// </summary>
        [DataMember(Name="sourceURL", EmitDefaultValue=false)]
        public string SourceURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDocumentSource {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EmbeddedData: ").Append(EmbeddedData).Append("\n");
            sb.Append("  SourceURL: ").Append(SourceURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDocumentSource);
        }

        /// <summary>
        /// Returns true if CreateDocumentSource instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDocumentSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDocumentSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EmbeddedData == input.EmbeddedData ||
                    (this.EmbeddedData != null &&
                    this.EmbeddedData.Equals(input.EmbeddedData))
                ) && 
                (
                    this.SourceURL == input.SourceURL ||
                    (this.SourceURL != null &&
                    this.SourceURL.Equals(input.SourceURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EmbeddedData != null)
                    hashCode = hashCode * 59 + this.EmbeddedData.GetHashCode();
                if (this.SourceURL != null)
                    hashCode = hashCode * 59 + this.SourceURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
