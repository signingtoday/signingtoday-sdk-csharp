/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// LFResource
    /// </summary>
    [DataContract]
    public partial class LFResource :  IEquatable<LFResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LFResource" /> class.
        /// </summary>
        /// <param name="id">Unique id of the resource.</param>
        /// <param name="domain">The _domain_ is the Organization which a user or a DST belongs.</param>
        /// <param name="title">Title of the resource.</param>
        /// <param name="filename">Name of the file uploaded, with its extension as well.</param>
        /// <param name="pages">Indicates how many pages the resource is.</param>
        /// <param name="extraData">Extra data of the resource.</param>
        public LFResource(Guid id = default(Guid), string domain = default(string), string title = default(string), string filename = default(string), int pages = default(int), Dictionary<string, Object> extraData = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.Domain = domain;
            this.Title = title;
            this.Filename = filename;
            this.Pages = pages;
            this.ExtraData = extraData;
        }
        
        /// <summary>
        /// Unique id of the resource
        /// </summary>
        /// <value>Unique id of the resource</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The _domain_ is the Organization which a user or a DST belongs
        /// </summary>
        /// <value>The _domain_ is the Organization which a user or a DST belongs</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Type of the resource, for example a _PDFResource_
        /// </summary>
        /// <value>Type of the resource, for example a _PDFResource_</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Unique id of the _DST_ which the resource is correlated
        /// </summary>
        /// <value>Unique id of the _DST_ which the resource is correlated</value>
        [DataMember(Name="dstUuid", EmitDefaultValue=false)]
        public Guid DstUuid { get; private set; }

        /// <summary>
        /// Title of the resource
        /// </summary>
        /// <value>Title of the resource</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Name of the file uploaded, with its extension as well
        /// </summary>
        /// <value>Name of the file uploaded, with its extension as well</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Url of the resource
        /// </summary>
        /// <value>Url of the resource</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }

        /// <summary>
        /// Size of the resource
        /// </summary>
        /// <value>Size of the resource</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long Size { get; private set; }

        /// <summary>
        /// Indicates when the resource has been uploaded
        /// </summary>
        /// <value>Indicates when the resource has been uploaded</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// _MIME_ type of the resource
        /// </summary>
        /// <value>_MIME_ type of the resource</value>
        [DataMember(Name="mimetype", EmitDefaultValue=false)]
        public string Mimetype { get; private set; }

        /// <summary>
        /// Indicates how many pages the resource is
        /// </summary>
        /// <value>Indicates how many pages the resource is</value>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public int Pages { get; set; }

        /// <summary>
        /// Extra data of the resource
        /// </summary>
        /// <value>Extra data of the resource</value>
        [DataMember(Name="extraData", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LFResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DstUuid: ").Append(DstUuid).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Mimetype: ").Append(Mimetype).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LFResource);
        }

        /// <summary>
        /// Returns true if LFResource instances are equal
        /// </summary>
        /// <param name="input">Instance of LFResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LFResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DstUuid == input.DstUuid ||
                    (this.DstUuid != null &&
                    this.DstUuid.Equals(input.DstUuid))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Mimetype == input.Mimetype ||
                    (this.Mimetype != null &&
                    this.Mimetype.Equals(input.Mimetype))
                ) && 
                (
                    this.Pages == input.Pages ||
                    (this.Pages != null &&
                    this.Pages.Equals(input.Pages))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    input.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DstUuid != null)
                    hashCode = hashCode * 59 + this.DstUuid.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Mimetype != null)
                    hashCode = hashCode * 59 + this.Mimetype.GetHashCode();
                if (this.Pages != null)
                    hashCode = hashCode * 59 + this.Pages.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
