/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// InlineObject8
    /// </summary>
    [DataContract]
    public partial class InlineObject8 :  IEquatable<InlineObject8>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject8" /> class.
        /// </summary>
        /// <param name="example1">example1.</param>
        public InlineObject8(string example1 = default(string))
        {
            this.Example1 = example1;
        }
        
        /// <summary>
        /// Gets or Sets Example1
        /// </summary>
        [DataMember(Name="example1", EmitDefaultValue=false)]
        public string Example1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject8 {\n");
            sb.Append("  Example1: ").Append(Example1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject8);
        }

        /// <summary>
        /// Returns true if InlineObject8 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject8 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject8 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Example1 == input.Example1 ||
                    (this.Example1 != null &&
                    this.Example1.Equals(input.Example1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Example1 != null)
                    hashCode = hashCode * 59 + this.Example1.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
