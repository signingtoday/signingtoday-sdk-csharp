/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// CreateDocument
    /// </summary>
    [DataContract]
    public partial class CreateDocument :  IEquatable<CreateDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDocument" /> class.
        /// </summary>
        /// <param name="resource">resource.</param>
        /// <param name="forms">The fillable elements of the document. Use the type field to identify textual fillable field and signature fields..</param>
        /// <param name="signatureRequests">The list of signature request of the document..</param>
        /// <param name="signerGroups">The sign plan for the document.</param>
        public CreateDocument(CreateDocumentResource resource = default(CreateDocumentResource), List<FillableForm> forms = default(List<FillableForm>), List<SignatureRequest> signatureRequests = default(List<SignatureRequest>), List<SignersGroup> signerGroups = default(List<SignersGroup>))
        {
            this.Resource = resource;
            this.Forms = forms;
            this.SignatureRequests = signatureRequests;
            this.SignerGroups = signerGroups;
        }
        
        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public CreateDocumentResource Resource { get; set; }

        /// <summary>
        /// The fillable elements of the document. Use the type field to identify textual fillable field and signature fields.
        /// </summary>
        /// <value>The fillable elements of the document. Use the type field to identify textual fillable field and signature fields.</value>
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public List<FillableForm> Forms { get; set; }

        /// <summary>
        /// The list of signature request of the document.
        /// </summary>
        /// <value>The list of signature request of the document.</value>
        [DataMember(Name="signatureRequests", EmitDefaultValue=false)]
        public List<SignatureRequest> SignatureRequests { get; set; }

        /// <summary>
        /// The sign plan for the document
        /// </summary>
        /// <value>The sign plan for the document</value>
        [DataMember(Name="signerGroups", EmitDefaultValue=false)]
        public List<SignersGroup> SignerGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDocument {\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  SignatureRequests: ").Append(SignatureRequests).Append("\n");
            sb.Append("  SignerGroups: ").Append(SignerGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDocument);
        }

        /// <summary>
        /// Returns true if CreateDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Forms == input.Forms ||
                    this.Forms != null &&
                    input.Forms != null &&
                    this.Forms.SequenceEqual(input.Forms)
                ) && 
                (
                    this.SignatureRequests == input.SignatureRequests ||
                    this.SignatureRequests != null &&
                    input.SignatureRequests != null &&
                    this.SignatureRequests.SequenceEqual(input.SignatureRequests)
                ) && 
                (
                    this.SignerGroups == input.SignerGroups ||
                    this.SignerGroups != null &&
                    input.SignerGroups != null &&
                    this.SignerGroups.SequenceEqual(input.SignerGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Forms != null)
                    hashCode = hashCode * 59 + this.Forms.GetHashCode();
                if (this.SignatureRequests != null)
                    hashCode = hashCode * 59 + this.SignatureRequests.GetHashCode();
                if (this.SignerGroups != null)
                    hashCode = hashCode * 59 + this.SignerGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
