/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// DSTStatusChangedNotification
    /// </summary>
    [DataContract]
    public partial class DSTStatusChangedNotification :  IEquatable<DSTStatusChangedNotification>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ToFill for value: toFill
            /// </summary>
            [EnumMember(Value = "toFill")]
            ToFill = 1,

            /// <summary>
            /// Enum ToSign for value: toSign
            /// </summary>
            [EnumMember(Value = "toSign")]
            ToSign = 2,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 3,

            /// <summary>
            /// Enum Performed for value: performed
            /// </summary>
            [EnumMember(Value = "performed")]
            Performed = 4,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 5

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DSTStatusChangedNotification" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="dst">dst.</param>
        /// <param name="reason">reason.</param>
        public DSTStatusChangedNotification(StatusEnum? status = default(StatusEnum?), Guid dst = default(Guid), string reason = default(string))
        {
            this.Status = status;
            this.Dst = dst;
            this.Reason = reason;
        }
        

        /// <summary>
        /// Gets or Sets Dst
        /// </summary>
        [DataMember(Name="dst", EmitDefaultValue=false)]
        public Guid Dst { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSTStatusChangedNotification {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Dst: ").Append(Dst).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DSTStatusChangedNotification);
        }

        /// <summary>
        /// Returns true if DSTStatusChangedNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of DSTStatusChangedNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSTStatusChangedNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Dst == input.Dst ||
                    (this.Dst != null &&
                    this.Dst.Equals(input.Dst))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Dst != null)
                    hashCode = hashCode * 59 + this.Dst.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
