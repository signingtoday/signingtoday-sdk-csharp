/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigningToday.Client.OpenAPIDateConverter;

namespace SigningToday.Model
{
    /// <summary>
    /// IdentityProviderDataTokenInfo
    /// </summary>
    [DataContract]
    public partial class IdentityProviderDataTokenInfo :  IEquatable<IdentityProviderDataTokenInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderDataTokenInfo" /> class.
        /// </summary>
        /// <param name="ulMinPinLen">ulMinPinLen.</param>
        /// <param name="manufacturerID">manufacturerID.</param>
        /// <param name="ulFreePublicMemory">ulFreePublicMemory.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="ulTotalPublicMemory">ulTotalPublicMemory.</param>
        /// <param name="label">label.</param>
        /// <param name="flags">flags.</param>
        /// <param name="ulTotalPrivateMemory">ulTotalPrivateMemory.</param>
        /// <param name="model">model.</param>
        /// <param name="ulFreePrivateMemory">ulFreePrivateMemory.</param>
        /// <param name="ulMaxPinLen">ulMaxPinLen.</param>
        public IdentityProviderDataTokenInfo(decimal ulMinPinLen = default(decimal), string manufacturerID = default(string), decimal ulFreePublicMemory = default(decimal), string serialNumber = default(string), decimal ulTotalPublicMemory = default(decimal), string label = default(string), decimal flags = default(decimal), decimal ulTotalPrivateMemory = default(decimal), string model = default(string), decimal ulFreePrivateMemory = default(decimal), decimal ulMaxPinLen = default(decimal))
        {
            this.UlMinPinLen = ulMinPinLen;
            this.ManufacturerID = manufacturerID;
            this.UlFreePublicMemory = ulFreePublicMemory;
            this.SerialNumber = serialNumber;
            this.UlTotalPublicMemory = ulTotalPublicMemory;
            this.Label = label;
            this.Flags = flags;
            this.UlTotalPrivateMemory = ulTotalPrivateMemory;
            this.Model = model;
            this.UlFreePrivateMemory = ulFreePrivateMemory;
            this.UlMaxPinLen = ulMaxPinLen;
        }
        
        /// <summary>
        /// Gets or Sets UlMinPinLen
        /// </summary>
        [DataMember(Name="ulMinPinLen", EmitDefaultValue=false)]
        public decimal UlMinPinLen { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerID
        /// </summary>
        [DataMember(Name="manufacturerID", EmitDefaultValue=false)]
        public string ManufacturerID { get; set; }

        /// <summary>
        /// Gets or Sets UlFreePublicMemory
        /// </summary>
        [DataMember(Name="ulFreePublicMemory", EmitDefaultValue=false)]
        public decimal UlFreePublicMemory { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets UlTotalPublicMemory
        /// </summary>
        [DataMember(Name="ulTotalPublicMemory", EmitDefaultValue=false)]
        public decimal UlTotalPublicMemory { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public decimal Flags { get; set; }

        /// <summary>
        /// Gets or Sets UlTotalPrivateMemory
        /// </summary>
        [DataMember(Name="ulTotalPrivateMemory", EmitDefaultValue=false)]
        public decimal UlTotalPrivateMemory { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets UlFreePrivateMemory
        /// </summary>
        [DataMember(Name="ulFreePrivateMemory", EmitDefaultValue=false)]
        public decimal UlFreePrivateMemory { get; set; }

        /// <summary>
        /// Gets or Sets UlMaxPinLen
        /// </summary>
        [DataMember(Name="ulMaxPinLen", EmitDefaultValue=false)]
        public decimal UlMaxPinLen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProviderDataTokenInfo {\n");
            sb.Append("  UlMinPinLen: ").Append(UlMinPinLen).Append("\n");
            sb.Append("  ManufacturerID: ").Append(ManufacturerID).Append("\n");
            sb.Append("  UlFreePublicMemory: ").Append(UlFreePublicMemory).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  UlTotalPublicMemory: ").Append(UlTotalPublicMemory).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  UlTotalPrivateMemory: ").Append(UlTotalPrivateMemory).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  UlFreePrivateMemory: ").Append(UlFreePrivateMemory).Append("\n");
            sb.Append("  UlMaxPinLen: ").Append(UlMaxPinLen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProviderDataTokenInfo);
        }

        /// <summary>
        /// Returns true if IdentityProviderDataTokenInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProviderDataTokenInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderDataTokenInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UlMinPinLen == input.UlMinPinLen ||
                    (this.UlMinPinLen != null &&
                    this.UlMinPinLen.Equals(input.UlMinPinLen))
                ) && 
                (
                    this.ManufacturerID == input.ManufacturerID ||
                    (this.ManufacturerID != null &&
                    this.ManufacturerID.Equals(input.ManufacturerID))
                ) && 
                (
                    this.UlFreePublicMemory == input.UlFreePublicMemory ||
                    (this.UlFreePublicMemory != null &&
                    this.UlFreePublicMemory.Equals(input.UlFreePublicMemory))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.UlTotalPublicMemory == input.UlTotalPublicMemory ||
                    (this.UlTotalPublicMemory != null &&
                    this.UlTotalPublicMemory.Equals(input.UlTotalPublicMemory))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Flags == input.Flags ||
                    (this.Flags != null &&
                    this.Flags.Equals(input.Flags))
                ) && 
                (
                    this.UlTotalPrivateMemory == input.UlTotalPrivateMemory ||
                    (this.UlTotalPrivateMemory != null &&
                    this.UlTotalPrivateMemory.Equals(input.UlTotalPrivateMemory))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.UlFreePrivateMemory == input.UlFreePrivateMemory ||
                    (this.UlFreePrivateMemory != null &&
                    this.UlFreePrivateMemory.Equals(input.UlFreePrivateMemory))
                ) && 
                (
                    this.UlMaxPinLen == input.UlMaxPinLen ||
                    (this.UlMaxPinLen != null &&
                    this.UlMaxPinLen.Equals(input.UlMaxPinLen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UlMinPinLen != null)
                    hashCode = hashCode * 59 + this.UlMinPinLen.GetHashCode();
                if (this.ManufacturerID != null)
                    hashCode = hashCode * 59 + this.ManufacturerID.GetHashCode();
                if (this.UlFreePublicMemory != null)
                    hashCode = hashCode * 59 + this.UlFreePublicMemory.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.UlTotalPublicMemory != null)
                    hashCode = hashCode * 59 + this.UlTotalPublicMemory.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.UlTotalPrivateMemory != null)
                    hashCode = hashCode * 59 + this.UlTotalPrivateMemory.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.UlFreePrivateMemory != null)
                    hashCode = hashCode * 59 + this.UlFreePrivateMemory.GetHashCode();
                if (this.UlMaxPinLen != null)
                    hashCode = hashCode * 59 + this.UlMaxPinLen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
