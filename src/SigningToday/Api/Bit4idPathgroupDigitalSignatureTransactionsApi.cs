/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupDigitalSignatureTransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve the audit records associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieves the audit records associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;AuditRecord&gt;</returns>
        List<AuditRecord> DSTIdAuditGet (Guid id);

        /// <summary>
        /// Retrieve the audit records associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieves the audit records associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;AuditRecord&gt;</returns>
        ApiResponse<List<AuditRecord>> DSTIdAuditGetWithHttpInfo (Guid id);
        /// <summary>
        /// Delete a DST
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        void DSTIdDelete (Guid id);

        /// <summary>
        /// Delete a DST
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DSTIdDeleteWithHttpInfo (Guid id);
        /// <summary>
        /// Fill a form of a DST
        /// </summary>
        /// <remarks>
        /// This API allows to fill a form of a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdFillPatch (Guid id, FillableForm fillableForm);

        /// <summary>
        /// Fill a form of a DST
        /// </summary>
        /// <remarks>
        /// This API allows to fill a form of a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdFillPatchWithHttpInfo (Guid id, FillableForm fillableForm);
        /// <summary>
        /// Retrieve a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdGet (Guid id);

        /// <summary>
        /// Retrieve a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdGetWithHttpInfo (Guid id);
        /// <summary>
        /// Instantiate a DST from a template
        /// </summary>
        /// <remarks>
        /// This API allows to instantiate a DST from a template by specifying the template Id.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdInstantiatePost (Guid id);

        /// <summary>
        /// Instantiate a DST from a template
        /// </summary>
        /// <remarks>
        /// This API allows to instantiate a DST from a template by specifying the template Id.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdInstantiatePostWithHttpInfo (Guid id);
        /// <summary>
        /// Modify a published DST template
        /// </summary>
        /// <remarks>
        /// This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdModifyPost (Guid id);

        /// <summary>
        /// Modify a published DST template
        /// </summary>
        /// <remarks>
        /// This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdModifyPostWithHttpInfo (Guid id);
        /// <summary>
        /// Send notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API allows to send notifications to pending users for an active _DST_.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        void DSTIdNotifyPost (Guid id);

        /// <summary>
        /// Send notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API allows to send notifications to pending users for an active _DST_.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DSTIdNotifyPostWithHttpInfo (Guid id);
        /// <summary>
        /// Publish a DST
        /// </summary>
        /// <remarks>
        /// This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdPublishPost (Guid id);

        /// <summary>
        /// Publish a DST
        /// </summary>
        /// <remarks>
        /// This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdPublishPostWithHttpInfo (Guid id);
        /// <summary>
        /// Update a DST
        /// </summary>
        /// <remarks>
        /// This API allows to update a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdPut (Guid id, DigitalSignatureTransaction digitalSignatureTransaction);

        /// <summary>
        /// Update a DST
        /// </summary>
        /// <remarks>
        /// This API allows to update a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdPutWithHttpInfo (Guid id, DigitalSignatureTransaction digitalSignatureTransaction);
        /// <summary>
        /// Replace a rejected DST
        /// </summary>
        /// <remarks>
        /// This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdReplacePost (Guid id);

        /// <summary>
        /// Replace a rejected DST
        /// </summary>
        /// <remarks>
        /// This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdReplacePostWithHttpInfo (Guid id);
        /// <summary>
        /// Return the address for signing
        /// </summary>
        /// <remarks>
        /// This API returns the address to perform the signature.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>DSTSigningAddressResponse</returns>
        DSTSigningAddressResponse DSTIdSignDocIdSignIdGet (Guid id, int docId, int signId);

        /// <summary>
        /// Return the address for signing
        /// </summary>
        /// <remarks>
        /// This API returns the address to perform the signature.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>ApiResponse of DSTSigningAddressResponse</returns>
        ApiResponse<DSTSigningAddressResponse> DSTIdSignDocIdSignIdGetWithHttpInfo (Guid id, int docId, int signId);
        /// <summary>
        /// Create a template from a DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdTemplatizePost (Guid id);

        /// <summary>
        /// Create a template from a DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdTemplatizePostWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve DSTs
        /// </summary>
        /// <remarks>
        /// This API allows to list the DSTs of an organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>DSTsGetResponse</returns>
        DSTsGetResponse DSTsGet (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve DSTs
        /// </summary>
        /// <remarks>
        /// This API allows to list the DSTs of an organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of DSTsGetResponse</returns>
        ApiResponse<DSTsGetResponse> DSTsGetWithHttpInfo (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Create a new DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTsPost (DigitalSignatureTransaction digitalSignatureTransaction);

        /// <summary>
        /// Create a new DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTsPostWithHttpInfo (DigitalSignatureTransaction digitalSignatureTransaction);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve the audit records associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieves the audit records associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;AuditRecord&gt;</returns>
        System.Threading.Tasks.Task<List<AuditRecord>> DSTIdAuditGetAsync (Guid id);

        /// <summary>
        /// Retrieve the audit records associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieves the audit records associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;AuditRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditRecord>>> DSTIdAuditGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Delete a DST
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DSTIdDeleteAsync (Guid id);

        /// <summary>
        /// Delete a DST
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdDeleteAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Fill a form of a DST
        /// </summary>
        /// <remarks>
        /// This API allows to fill a form of a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdFillPatchAsync (Guid id, FillableForm fillableForm);

        /// <summary>
        /// Fill a form of a DST
        /// </summary>
        /// <remarks>
        /// This API allows to fill a form of a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdFillPatchAsyncWithHttpInfo (Guid id, FillableForm fillableForm);
        /// <summary>
        /// Retrieve a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdGetAsync (Guid id);

        /// <summary>
        /// Retrieve a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Instantiate a DST from a template
        /// </summary>
        /// <remarks>
        /// This API allows to instantiate a DST from a template by specifying the template Id.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdInstantiatePostAsync (Guid id);

        /// <summary>
        /// Instantiate a DST from a template
        /// </summary>
        /// <remarks>
        /// This API allows to instantiate a DST from a template by specifying the template Id.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdInstantiatePostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Modify a published DST template
        /// </summary>
        /// <remarks>
        /// This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdModifyPostAsync (Guid id);

        /// <summary>
        /// Modify a published DST template
        /// </summary>
        /// <remarks>
        /// This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdModifyPostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Send notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API allows to send notifications to pending users for an active _DST_.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DSTIdNotifyPostAsync (Guid id);

        /// <summary>
        /// Send notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API allows to send notifications to pending users for an active _DST_.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdNotifyPostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Publish a DST
        /// </summary>
        /// <remarks>
        /// This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdPublishPostAsync (Guid id);

        /// <summary>
        /// Publish a DST
        /// </summary>
        /// <remarks>
        /// This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdPublishPostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Update a DST
        /// </summary>
        /// <remarks>
        /// This API allows to update a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdPutAsync (Guid id, DigitalSignatureTransaction digitalSignatureTransaction);

        /// <summary>
        /// Update a DST
        /// </summary>
        /// <remarks>
        /// This API allows to update a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdPutAsyncWithHttpInfo (Guid id, DigitalSignatureTransaction digitalSignatureTransaction);
        /// <summary>
        /// Replace a rejected DST
        /// </summary>
        /// <remarks>
        /// This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdReplacePostAsync (Guid id);

        /// <summary>
        /// Replace a rejected DST
        /// </summary>
        /// <remarks>
        /// This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdReplacePostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Return the address for signing
        /// </summary>
        /// <remarks>
        /// This API returns the address to perform the signature.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>Task of DSTSigningAddressResponse</returns>
        System.Threading.Tasks.Task<DSTSigningAddressResponse> DSTIdSignDocIdSignIdGetAsync (Guid id, int docId, int signId);

        /// <summary>
        /// Return the address for signing
        /// </summary>
        /// <remarks>
        /// This API returns the address to perform the signature.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>Task of ApiResponse (DSTSigningAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSTSigningAddressResponse>> DSTIdSignDocIdSignIdGetAsyncWithHttpInfo (Guid id, int docId, int signId);
        /// <summary>
        /// Create a template from a DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdTemplatizePostAsync (Guid id);

        /// <summary>
        /// Create a template from a DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdTemplatizePostAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve DSTs
        /// </summary>
        /// <remarks>
        /// This API allows to list the DSTs of an organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of DSTsGetResponse</returns>
        System.Threading.Tasks.Task<DSTsGetResponse> DSTsGetAsync (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve DSTs
        /// </summary>
        /// <remarks>
        /// This API allows to list the DSTs of an organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (DSTsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSTsGetResponse>> DSTsGetAsyncWithHttpInfo (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Create a new DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTsPostAsync (DigitalSignatureTransaction digitalSignatureTransaction);

        /// <summary>
        /// Create a new DST
        /// </summary>
        /// <remarks>
        /// This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTsPostAsyncWithHttpInfo (DigitalSignatureTransaction digitalSignatureTransaction);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupDigitalSignatureTransactionsApi : IBit4idPathgroupDigitalSignatureTransactionsApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDigitalSignatureTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupDigitalSignatureTransactionsApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDigitalSignatureTransactionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupDigitalSignatureTransactionsApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDigitalSignatureTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupDigitalSignatureTransactionsApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve the audit records associated to the DST This API allows to retrieves the audit records associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;AuditRecord&gt;</returns>
        public List<AuditRecord> DSTIdAuditGet (Guid id)
        {
             ApiResponse<List<AuditRecord>> localVarResponse = DSTIdAuditGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the audit records associated to the DST This API allows to retrieves the audit records associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;AuditRecord&gt;</returns>
        public ApiResponse<List<AuditRecord>> DSTIdAuditGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdAuditGet");

            var localVarPath = "/DST/{id}/audit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdAuditGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuditRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditRecord>)));
        }

        /// <summary>
        /// Retrieve the audit records associated to the DST This API allows to retrieves the audit records associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;AuditRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditRecord>> DSTIdAuditGetAsync (Guid id)
        {
             ApiResponse<List<AuditRecord>> localVarResponse = await DSTIdAuditGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the audit records associated to the DST This API allows to retrieves the audit records associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;AuditRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditRecord>>> DSTIdAuditGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdAuditGet");

            var localVarPath = "/DST/{id}/audit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdAuditGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuditRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditRecord>)));
        }

        /// <summary>
        /// Delete a DST This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        public void DSTIdDelete (Guid id)
        {
             DSTIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a DST This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DSTIdDeleteWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdDelete");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a DST This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DSTIdDeleteAsync (Guid id)
        {
             await DSTIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a DST This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdDeleteAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdDelete");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Fill a form of a DST This API allows to fill a form of a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdFillPatch (Guid id, FillableForm fillableForm)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdFillPatchWithHttpInfo(id, fillableForm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fill a form of a DST This API allows to fill a form of a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdFillPatchWithHttpInfo (Guid id, FillableForm fillableForm)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdFillPatch");
            // verify the required parameter 'fillableForm' is set
            if (fillableForm == null)
                throw new ApiException(400, "Missing required parameter 'fillableForm' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdFillPatch");

            var localVarPath = "/DST/{id}/fill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fillableForm != null && fillableForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fillableForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fillableForm; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdFillPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Fill a form of a DST This API allows to fill a form of a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdFillPatchAsync (Guid id, FillableForm fillableForm)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdFillPatchAsyncWithHttpInfo(id, fillableForm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fill a form of a DST This API allows to fill a form of a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="fillableForm">The form filled by the user.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdFillPatchAsyncWithHttpInfo (Guid id, FillableForm fillableForm)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdFillPatch");
            // verify the required parameter 'fillableForm' is set
            if (fillableForm == null)
                throw new ApiException(400, "Missing required parameter 'fillableForm' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdFillPatch");

            var localVarPath = "/DST/{id}/fill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fillableForm != null && fillableForm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fillableForm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fillableForm; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdFillPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Retrieve a DST This API allows to retrieve a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdGet (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a DST This API allows to retrieve a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdGet");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Retrieve a DST This API allows to retrieve a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdGetAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a DST This API allows to retrieve a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdGet");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Instantiate a DST from a template This API allows to instantiate a DST from a template by specifying the template Id.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdInstantiatePost (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdInstantiatePostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instantiate a DST from a template This API allows to instantiate a DST from a template by specifying the template Id.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdInstantiatePostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdInstantiatePost");

            var localVarPath = "/DST/{id}/instantiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdInstantiatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Instantiate a DST from a template This API allows to instantiate a DST from a template by specifying the template Id.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdInstantiatePostAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdInstantiatePostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instantiate a DST from a template This API allows to instantiate a DST from a template by specifying the template Id.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdInstantiatePostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdInstantiatePost");

            var localVarPath = "/DST/{id}/instantiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdInstantiatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Modify a published DST template This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdModifyPost (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdModifyPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a published DST template This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdModifyPostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdModifyPost");

            var localVarPath = "/DST/{id}/modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdModifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Modify a published DST template This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdModifyPostAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdModifyPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify a published DST template This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdModifyPostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdModifyPost");

            var localVarPath = "/DST/{id}/modify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdModifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Send notifications for a DST This API allows to send notifications to pending users for an active _DST_.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        public void DSTIdNotifyPost (Guid id)
        {
             DSTIdNotifyPostWithHttpInfo(id);
        }

        /// <summary>
        /// Send notifications for a DST This API allows to send notifications to pending users for an active _DST_.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DSTIdNotifyPostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdNotifyPost");

            var localVarPath = "/DST/{id}/notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNotifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send notifications for a DST This API allows to send notifications to pending users for an active _DST_.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DSTIdNotifyPostAsync (Guid id)
        {
             await DSTIdNotifyPostAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Send notifications for a DST This API allows to send notifications to pending users for an active _DST_.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdNotifyPostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdNotifyPost");

            var localVarPath = "/DST/{id}/notify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNotifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Publish a DST This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdPublishPost (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdPublishPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a DST This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdPublishPostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPublishPost");

            var localVarPath = "/DST/{id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdPublishPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Publish a DST This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdPublishPostAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdPublishPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish a DST This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdPublishPostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPublishPost");

            var localVarPath = "/DST/{id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdPublishPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Update a DST This API allows to update a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdPut (Guid id, DigitalSignatureTransaction digitalSignatureTransaction)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdPutWithHttpInfo(id, digitalSignatureTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a DST This API allows to update a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdPutWithHttpInfo (Guid id, DigitalSignatureTransaction digitalSignatureTransaction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPut");
            // verify the required parameter 'digitalSignatureTransaction' is set
            if (digitalSignatureTransaction == null)
                throw new ApiException(400, "Missing required parameter 'digitalSignatureTransaction' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPut");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (digitalSignatureTransaction != null && digitalSignatureTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalSignatureTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalSignatureTransaction; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Update a DST This API allows to update a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdPutAsync (Guid id, DigitalSignatureTransaction digitalSignatureTransaction)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdPutAsyncWithHttpInfo(id, digitalSignatureTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a DST This API allows to update a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="digitalSignatureTransaction">DST replacing current object.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdPutAsyncWithHttpInfo (Guid id, DigitalSignatureTransaction digitalSignatureTransaction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPut");
            // verify the required parameter 'digitalSignatureTransaction' is set
            if (digitalSignatureTransaction == null)
                throw new ApiException(400, "Missing required parameter 'digitalSignatureTransaction' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdPut");

            var localVarPath = "/DST/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (digitalSignatureTransaction != null && digitalSignatureTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalSignatureTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalSignatureTransaction; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Replace a rejected DST This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdReplacePost (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdReplacePostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a rejected DST This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdReplacePostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdReplacePost");

            var localVarPath = "/DST/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Replace a rejected DST This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdReplacePostAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdReplacePostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a rejected DST This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdReplacePostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdReplacePost");

            var localVarPath = "/DST/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Return the address for signing This API returns the address to perform the signature.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>DSTSigningAddressResponse</returns>
        public DSTSigningAddressResponse DSTIdSignDocIdSignIdGet (Guid id, int docId, int signId)
        {
             ApiResponse<DSTSigningAddressResponse> localVarResponse = DSTIdSignDocIdSignIdGetWithHttpInfo(id, docId, signId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the address for signing This API returns the address to perform the signature.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>ApiResponse of DSTSigningAddressResponse</returns>
        public ApiResponse<DSTSigningAddressResponse> DSTIdSignDocIdSignIdGetWithHttpInfo (Guid id, int docId, int signId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");
            // verify the required parameter 'signId' is set
            if (signId == null)
                throw new ApiException(400, "Missing required parameter 'signId' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");

            var localVarPath = "/DST/{id}/sign/{docId}/{signId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter
            if (signId != null) localVarPathParams.Add("signId", this.Configuration.ApiClient.ParameterToString(signId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdSignDocIdSignIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTSigningAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTSigningAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTSigningAddressResponse)));
        }

        /// <summary>
        /// Return the address for signing This API returns the address to perform the signature.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>Task of DSTSigningAddressResponse</returns>
        public async System.Threading.Tasks.Task<DSTSigningAddressResponse> DSTIdSignDocIdSignIdGetAsync (Guid id, int docId, int signId)
        {
             ApiResponse<DSTSigningAddressResponse> localVarResponse = await DSTIdSignDocIdSignIdGetAsyncWithHttpInfo(id, docId, signId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the address for signing This API returns the address to perform the signature.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="docId">Reference to _docId_ has to be signed</param>
        /// <param name="signId">Reference to the signature request id</param>
        /// <returns>Task of ApiResponse (DSTSigningAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSTSigningAddressResponse>> DSTIdSignDocIdSignIdGetAsyncWithHttpInfo (Guid id, int docId, int signId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");
            // verify the required parameter 'signId' is set
            if (signId == null)
                throw new ApiException(400, "Missing required parameter 'signId' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdSignDocIdSignIdGet");

            var localVarPath = "/DST/{id}/sign/{docId}/{signId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter
            if (signId != null) localVarPathParams.Add("signId", this.Configuration.ApiClient.ParameterToString(signId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdSignDocIdSignIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTSigningAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTSigningAddressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTSigningAddressResponse)));
        }

        /// <summary>
        /// Create a template from a DST This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdTemplatizePost (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdTemplatizePostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a template from a DST This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdTemplatizePostWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdTemplatizePost");

            var localVarPath = "/DST/{id}/templatize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdTemplatizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Create a template from a DST This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdTemplatizePostAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdTemplatizePostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a template from a DST This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdTemplatizePostAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTIdTemplatizePost");

            var localVarPath = "/DST/{id}/templatize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdTemplatizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Retrieve DSTs This API allows to list the DSTs of an organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>DSTsGetResponse</returns>
        public DSTsGetResponse DSTsGet (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<DSTsGetResponse> localVarResponse = DSTsGetWithHttpInfo(template, userId, top, skip, count, orderBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve DSTs This API allows to list the DSTs of an organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of DSTsGetResponse</returns>
        public ApiResponse<DSTsGetResponse> DSTsGetWithHttpInfo (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/DSTs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (template != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template", template)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTsGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTsGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTsGetResponse)));
        }

        /// <summary>
        /// Retrieve DSTs This API allows to list the DSTs of an organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of DSTsGetResponse</returns>
        public async System.Threading.Tasks.Task<DSTsGetResponse> DSTsGetAsync (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<DSTsGetResponse> localVarResponse = await DSTsGetAsyncWithHttpInfo(template, userId, top, skip, count, orderBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve DSTs This API allows to list the DSTs of an organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">Select templates or instances (optional, default to false)</param>
        /// <param name="userId">Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)</param>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (DSTsGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSTsGetResponse>> DSTsGetAsyncWithHttpInfo (bool template = default(bool), Guid userId = default(Guid), int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/DSTs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (template != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template", template)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTsGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTsGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTsGetResponse)));
        }

        /// <summary>
        /// Create a new DST This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTsPost (DigitalSignatureTransaction digitalSignatureTransaction)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTsPostWithHttpInfo(digitalSignatureTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new DST This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTsPostWithHttpInfo (DigitalSignatureTransaction digitalSignatureTransaction)
        {
            // verify the required parameter 'digitalSignatureTransaction' is set
            if (digitalSignatureTransaction == null)
                throw new ApiException(400, "Missing required parameter 'digitalSignatureTransaction' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTsPost");

            var localVarPath = "/DSTs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalSignatureTransaction != null && digitalSignatureTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalSignatureTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalSignatureTransaction; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Create a new DST This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTsPostAsync (DigitalSignatureTransaction digitalSignatureTransaction)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTsPostAsyncWithHttpInfo(digitalSignatureTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new DST This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="digitalSignatureTransaction">DST to append to the current resources.</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTsPostAsyncWithHttpInfo (DigitalSignatureTransaction digitalSignatureTransaction)
        {
            // verify the required parameter 'digitalSignatureTransaction' is set
            if (digitalSignatureTransaction == null)
                throw new ApiException(400, "Missing required parameter 'digitalSignatureTransaction' when calling Bit4idPathgroupDigitalSignatureTransactionsApi->DSTsPost");

            var localVarPath = "/DSTs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (digitalSignatureTransaction != null && digitalSignatureTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(digitalSignatureTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = digitalSignatureTransaction; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

    }
}
