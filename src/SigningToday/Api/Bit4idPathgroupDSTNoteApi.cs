/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupDSTNoteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve the DSTNotes associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the DST Notes associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;DSTNote&gt;</returns>
        List<DSTNote> DSTIdNoteGet (Guid id);

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the DST Notes associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;DSTNote&gt;</returns>
        ApiResponse<List<DSTNote>> DSTIdNoteGetWithHttpInfo (Guid id);
        /// <summary>
        /// Delete a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns></returns>
        void DSTIdNoteNoteIdDelete (Guid id, long noteId);

        /// <summary>
        /// Delete a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DSTIdNoteNoteIdDeleteWithHttpInfo (Guid id, long noteId);
        /// <summary>
        /// Edit a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to edit a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>DSTNote</returns>
        DSTNote DSTIdNoteNoteIdPut (Guid id, long noteId, DSTNote dSTNote);

        /// <summary>
        /// Edit a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to edit a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>ApiResponse of DSTNote</returns>
        ApiResponse<DSTNote> DSTIdNoteNoteIdPutWithHttpInfo (Guid id, long noteId, DSTNote dSTNote);
        /// <summary>
        /// Append a new DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to append a new DSTNote to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>DSTNote</returns>
        DSTNote DSTIdNotePost (Guid id, InlineObject1 inlineObject1 = default(InlineObject1));

        /// <summary>
        /// Append a new DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to append a new DSTNote to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of DSTNote</returns>
        ApiResponse<DSTNote> DSTIdNotePostWithHttpInfo (Guid id, InlineObject1 inlineObject1 = default(InlineObject1));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve the DSTNotes associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the DST Notes associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;DSTNote&gt;</returns>
        System.Threading.Tasks.Task<List<DSTNote>> DSTIdNoteGetAsync (Guid id);

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the DST Notes associated to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;DSTNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DSTNote>>> DSTIdNoteGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Delete a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DSTIdNoteNoteIdDeleteAsync (Guid id, long noteId);

        /// <summary>
        /// Delete a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to delete a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdNoteNoteIdDeleteAsyncWithHttpInfo (Guid id, long noteId);
        /// <summary>
        /// Edit a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to edit a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>Task of DSTNote</returns>
        System.Threading.Tasks.Task<DSTNote> DSTIdNoteNoteIdPutAsync (Guid id, long noteId, DSTNote dSTNote);

        /// <summary>
        /// Edit a DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to edit a DSTNote.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>Task of ApiResponse (DSTNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSTNote>> DSTIdNoteNoteIdPutAsyncWithHttpInfo (Guid id, long noteId, DSTNote dSTNote);
        /// <summary>
        /// Append a new DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to append a new DSTNote to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of DSTNote</returns>
        System.Threading.Tasks.Task<DSTNote> DSTIdNotePostAsync (Guid id, InlineObject1 inlineObject1 = default(InlineObject1));

        /// <summary>
        /// Append a new DSTNote
        /// </summary>
        /// <remarks>
        /// This API allows to append a new DSTNote to the DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of ApiResponse (DSTNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSTNote>> DSTIdNotePostAsyncWithHttpInfo (Guid id, InlineObject1 inlineObject1 = default(InlineObject1));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupDSTNoteApi : IBit4idPathgroupDSTNoteApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDSTNoteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupDSTNoteApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDSTNoteApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupDSTNoteApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupDSTNoteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupDSTNoteApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST This API allows to retrieve the DST Notes associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;DSTNote&gt;</returns>
        public List<DSTNote> DSTIdNoteGet (Guid id)
        {
             ApiResponse<List<DSTNote>> localVarResponse = DSTIdNoteGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST This API allows to retrieve the DST Notes associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;DSTNote&gt;</returns>
        public ApiResponse<List<DSTNote>> DSTIdNoteGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteGet");

            var localVarPath = "/DST/{id}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DSTNote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DSTNote>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DSTNote>)));
        }

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST This API allows to retrieve the DST Notes associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;DSTNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<DSTNote>> DSTIdNoteGetAsync (Guid id)
        {
             ApiResponse<List<DSTNote>> localVarResponse = await DSTIdNoteGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the DSTNotes associated to the DST This API allows to retrieve the DST Notes associated to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;DSTNote&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DSTNote>>> DSTIdNoteGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteGet");

            var localVarPath = "/DST/{id}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DSTNote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DSTNote>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DSTNote>)));
        }

        /// <summary>
        /// Delete a DSTNote This API allows to delete a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns></returns>
        public void DSTIdNoteNoteIdDelete (Guid id, long noteId)
        {
             DSTIdNoteNoteIdDeleteWithHttpInfo(id, noteId);
        }

        /// <summary>
        /// Delete a DSTNote This API allows to delete a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DSTIdNoteNoteIdDeleteWithHttpInfo (Guid id, long noteId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdDelete");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdDelete");

            var localVarPath = "/DST/{id}/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteNoteIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a DSTNote This API allows to delete a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DSTIdNoteNoteIdDeleteAsync (Guid id, long noteId)
        {
             await DSTIdNoteNoteIdDeleteAsyncWithHttpInfo(id, noteId);

        }

        /// <summary>
        /// Delete a DSTNote This API allows to delete a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DSTIdNoteNoteIdDeleteAsyncWithHttpInfo (Guid id, long noteId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdDelete");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdDelete");

            var localVarPath = "/DST/{id}/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteNoteIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Edit a DSTNote This API allows to edit a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>DSTNote</returns>
        public DSTNote DSTIdNoteNoteIdPut (Guid id, long noteId, DSTNote dSTNote)
        {
             ApiResponse<DSTNote> localVarResponse = DSTIdNoteNoteIdPutWithHttpInfo(id, noteId, dSTNote);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a DSTNote This API allows to edit a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>ApiResponse of DSTNote</returns>
        public ApiResponse<DSTNote> DSTIdNoteNoteIdPutWithHttpInfo (Guid id, long noteId, DSTNote dSTNote)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");
            // verify the required parameter 'dSTNote' is set
            if (dSTNote == null)
                throw new ApiException(400, "Missing required parameter 'dSTNote' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");

            var localVarPath = "/DST/{id}/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (dSTNote != null && dSTNote.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dSTNote); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSTNote; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteNoteIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTNote)));
        }

        /// <summary>
        /// Edit a DSTNote This API allows to edit a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>Task of DSTNote</returns>
        public async System.Threading.Tasks.Task<DSTNote> DSTIdNoteNoteIdPutAsync (Guid id, long noteId, DSTNote dSTNote)
        {
             ApiResponse<DSTNote> localVarResponse = await DSTIdNoteNoteIdPutAsyncWithHttpInfo(id, noteId, dSTNote);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a DSTNote This API allows to edit a DSTNote.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="noteId">The reference of a DSTNote</param>
        /// <param name="dSTNote">DSTNote replacing current object.</param>
        /// <returns>Task of ApiResponse (DSTNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSTNote>> DSTIdNoteNoteIdPutAsyncWithHttpInfo (Guid id, long noteId, DSTNote dSTNote)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");
            // verify the required parameter 'dSTNote' is set
            if (dSTNote == null)
                throw new ApiException(400, "Missing required parameter 'dSTNote' when calling Bit4idPathgroupDSTNoteApi->DSTIdNoteNoteIdPut");

            var localVarPath = "/DST/{id}/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (dSTNote != null && dSTNote.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dSTNote); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSTNote; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNoteNoteIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTNote)));
        }

        /// <summary>
        /// Append a new DSTNote This API allows to append a new DSTNote to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>DSTNote</returns>
        public DSTNote DSTIdNotePost (Guid id, InlineObject1 inlineObject1 = default(InlineObject1))
        {
             ApiResponse<DSTNote> localVarResponse = DSTIdNotePostWithHttpInfo(id, inlineObject1);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a new DSTNote This API allows to append a new DSTNote to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of DSTNote</returns>
        public ApiResponse<DSTNote> DSTIdNotePostWithHttpInfo (Guid id, InlineObject1 inlineObject1 = default(InlineObject1))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNotePost");

            var localVarPath = "/DST/{id}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTNote)));
        }

        /// <summary>
        /// Append a new DSTNote This API allows to append a new DSTNote to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of DSTNote</returns>
        public async System.Threading.Tasks.Task<DSTNote> DSTIdNotePostAsync (Guid id, InlineObject1 inlineObject1 = default(InlineObject1))
        {
             ApiResponse<DSTNote> localVarResponse = await DSTIdNotePostAsyncWithHttpInfo(id, inlineObject1);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a new DSTNote This API allows to append a new DSTNote to the DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>Task of ApiResponse (DSTNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSTNote>> DSTIdNotePostAsyncWithHttpInfo (Guid id, InlineObject1 inlineObject1 = default(InlineObject1))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupDSTNoteApi->DSTIdNotePost");

            var localVarPath = "/DST/{id}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inlineObject1 != null && inlineObject1.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject1); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject1; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdNotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSTNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSTNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSTNote)));
        }

    }
}
