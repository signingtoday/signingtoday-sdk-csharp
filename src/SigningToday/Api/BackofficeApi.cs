/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackofficeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>AlfrescoSync</returns>
        AlfrescoSync OrganizationIdAlfrescoSyncGet (string id);

        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of AlfrescoSync</returns>
        ApiResponse<AlfrescoSync> OrganizationIdAlfrescoSyncGetWithHttpInfo (string id);
        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns></returns>
        void OrganizationIdAlfrescoSyncPost (string id, AlfrescoSync alfrescoSync);

        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationIdAlfrescoSyncPostWithHttpInfo (string id, AlfrescoSync alfrescoSync);
        /// <summary>
        /// Enable or disable an Organization account.
        /// </summary>
        /// <remarks>
        /// Enable or disable an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns></returns>
        void OrganizationIdDelete (string id, bool enabled = default(bool));

        /// <summary>
        /// Enable or disable an Organization account.
        /// </summary>
        /// <remarks>
        /// Enable or disable an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationIdDeleteWithHttpInfo (string id, bool enabled = default(bool));
        /// <summary>
        /// Retrieve info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Organization</returns>
        Organization OrganizationIdGet (string id);

        /// <summary>
        /// Retrieve info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> OrganizationIdGetWithHttpInfo (string id);
        /// <summary>
        /// Retrieve public resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream OrganizationIdPublicGet (string res, string id = default(string));

        /// <summary>
        /// Retrieve public resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> OrganizationIdPublicGetWithHttpInfo (string res, string id = default(string));
        /// <summary>
        /// Update info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns></returns>
        void OrganizationIdPut (string id, Organization organization = default(Organization));

        /// <summary>
        /// Update info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationIdPutWithHttpInfo (string id, Organization organization = default(Organization));
        /// <summary>
        /// Get an organization resource
        /// </summary>
        /// <remarks>
        /// Get an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream OrganizationIdResourceGet (string id, string resPath);

        /// <summary>
        /// Get an organization resource
        /// </summary>
        /// <remarks>
        /// Get an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> OrganizationIdResourceGetWithHttpInfo (string id, string resPath);
        /// <summary>
        /// Create or overwrite an organization resource
        /// </summary>
        /// <remarks>
        /// Create or overwrite an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns></returns>
        void OrganizationIdResourcePut (string id, string resPath, System.IO.Stream file);

        /// <summary>
        /// Create or overwrite an organization resource
        /// </summary>
        /// <remarks>
        /// Create or overwrite an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationIdResourcePutWithHttpInfo (string id, string resPath, System.IO.Stream file);
        /// <summary>
        /// Delete an organization resource
        /// </summary>
        /// <remarks>
        /// Deletes a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns></returns>
        void OrganizationResourceIdDelete (string id, string resPath);

        /// <summary>
        /// Delete an organization resource
        /// </summary>
        /// <remarks>
        /// Deletes a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationResourceIdDeleteWithHttpInfo (string id, string resPath);
        /// <summary>
        /// List all the organization resources
        /// </summary>
        /// <remarks>
        /// List all the organization resources.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> OrganizationResourcesGet (string id);

        /// <summary>
        /// List all the organization resources
        /// </summary>
        /// <remarks>
        /// List all the organization resources.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> OrganizationResourcesGetWithHttpInfo (string id);
        /// <summary>
        /// Retrieve organization tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> OrganizationTagsGet ();

        /// <summary>
        /// Retrieve organization tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> OrganizationTagsGetWithHttpInfo ();
        /// <summary>
        /// Get the list of organizations
        /// </summary>
        /// <remarks>
        /// Get the list of organizations
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>OrganizationsGetResponse</returns>
        OrganizationsGetResponse OrganizationsGet (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string));

        /// <summary>
        /// Get the list of organizations
        /// </summary>
        /// <remarks>
        /// Get the list of organizations
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of OrganizationsGetResponse</returns>
        ApiResponse<OrganizationsGetResponse> OrganizationsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string));
        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns></returns>
        void OrganizationsPost (Organization organization = default(Organization));

        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrganizationsPostWithHttpInfo (Organization organization = default(Organization));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of AlfrescoSync</returns>
        System.Threading.Tasks.Task<AlfrescoSync> OrganizationIdAlfrescoSyncGetAsync (string id);

        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (AlfrescoSync)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlfrescoSync>> OrganizationIdAlfrescoSyncGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationIdAlfrescoSyncPostAsync (string id, AlfrescoSync alfrescoSync);

        /// <summary>
        /// Sync all completed DSTs on Alfresco
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdAlfrescoSyncPostAsyncWithHttpInfo (string id, AlfrescoSync alfrescoSync);
        /// <summary>
        /// Enable or disable an Organization account.
        /// </summary>
        /// <remarks>
        /// Enable or disable an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationIdDeleteAsync (string id, bool enabled = default(bool));

        /// <summary>
        /// Enable or disable an Organization account.
        /// </summary>
        /// <remarks>
        /// Enable or disable an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdDeleteAsyncWithHttpInfo (string id, bool enabled = default(bool));
        /// <summary>
        /// Retrieve info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> OrganizationIdGetAsync (string id);

        /// <summary>
        /// Retrieve info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieve public resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> OrganizationIdPublicGetAsync (string res, string id = default(string));

        /// <summary>
        /// Retrieve public resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrganizationIdPublicGetAsyncWithHttpInfo (string res, string id = default(string));
        /// <summary>
        /// Update info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationIdPutAsync (string id, Organization organization = default(Organization));

        /// <summary>
        /// Update info on one organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdPutAsyncWithHttpInfo (string id, Organization organization = default(Organization));
        /// <summary>
        /// Get an organization resource
        /// </summary>
        /// <remarks>
        /// Get an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> OrganizationIdResourceGetAsync (string id, string resPath);

        /// <summary>
        /// Get an organization resource
        /// </summary>
        /// <remarks>
        /// Get an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrganizationIdResourceGetAsyncWithHttpInfo (string id, string resPath);
        /// <summary>
        /// Create or overwrite an organization resource
        /// </summary>
        /// <remarks>
        /// Create or overwrite an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationIdResourcePutAsync (string id, string resPath, System.IO.Stream file);

        /// <summary>
        /// Create or overwrite an organization resource
        /// </summary>
        /// <remarks>
        /// Create or overwrite an organization resource
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdResourcePutAsyncWithHttpInfo (string id, string resPath, System.IO.Stream file);
        /// <summary>
        /// Delete an organization resource
        /// </summary>
        /// <remarks>
        /// Deletes a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationResourceIdDeleteAsync (string id, string resPath);

        /// <summary>
        /// Delete an organization resource
        /// </summary>
        /// <remarks>
        /// Deletes a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationResourceIdDeleteAsyncWithHttpInfo (string id, string resPath);
        /// <summary>
        /// List all the organization resources
        /// </summary>
        /// <remarks>
        /// List all the organization resources.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> OrganizationResourcesGetAsync (string id);

        /// <summary>
        /// List all the organization resources
        /// </summary>
        /// <remarks>
        /// List all the organization resources.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> OrganizationResourcesGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieve organization tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> OrganizationTagsGetAsync ();

        /// <summary>
        /// Retrieve organization tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> OrganizationTagsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get the list of organizations
        /// </summary>
        /// <remarks>
        /// Get the list of organizations
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of OrganizationsGetResponse</returns>
        System.Threading.Tasks.Task<OrganizationsGetResponse> OrganizationsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string));

        /// <summary>
        /// Get the list of organizations
        /// </summary>
        /// <remarks>
        /// Get the list of organizations
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationsGetResponse>> OrganizationsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string));
        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrganizationsPostAsync (Organization organization = default(Organization));

        /// <summary>
        /// Create a new organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsPostAsyncWithHttpInfo (Organization organization = default(Organization));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BackofficeApi : IBackofficeApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BackofficeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackofficeApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackofficeApi"/> class
        /// </summary>
        /// <returns></returns>
        public BackofficeApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackofficeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BackofficeApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>AlfrescoSync</returns>
        public AlfrescoSync OrganizationIdAlfrescoSyncGet (string id)
        {
             ApiResponse<AlfrescoSync> localVarResponse = OrganizationIdAlfrescoSyncGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of AlfrescoSync</returns>
        public ApiResponse<AlfrescoSync> OrganizationIdAlfrescoSyncGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdAlfrescoSyncGet");

            var localVarPath = "/organization/{id}/alfrescoSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdAlfrescoSyncGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlfrescoSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlfrescoSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlfrescoSync)));
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of AlfrescoSync</returns>
        public async System.Threading.Tasks.Task<AlfrescoSync> OrganizationIdAlfrescoSyncGetAsync (string id)
        {
             ApiResponse<AlfrescoSync> localVarResponse = await OrganizationIdAlfrescoSyncGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (AlfrescoSync)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlfrescoSync>> OrganizationIdAlfrescoSyncGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdAlfrescoSyncGet");

            var localVarPath = "/organization/{id}/alfrescoSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdAlfrescoSyncGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlfrescoSync>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlfrescoSync) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlfrescoSync)));
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns></returns>
        public void OrganizationIdAlfrescoSyncPost (string id, AlfrescoSync alfrescoSync)
        {
             OrganizationIdAlfrescoSyncPostWithHttpInfo(id, alfrescoSync);
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationIdAlfrescoSyncPostWithHttpInfo (string id, AlfrescoSync alfrescoSync)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdAlfrescoSyncPost");
            // verify the required parameter 'alfrescoSync' is set
            if (alfrescoSync == null)
                throw new ApiException(400, "Missing required parameter 'alfrescoSync' when calling BackofficeApi->OrganizationIdAlfrescoSyncPost");

            var localVarPath = "/organization/{id}/alfrescoSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alfrescoSync != null && alfrescoSync.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(alfrescoSync); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alfrescoSync; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdAlfrescoSyncPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationIdAlfrescoSyncPostAsync (string id, AlfrescoSync alfrescoSync)
        {
             await OrganizationIdAlfrescoSyncPostAsyncWithHttpInfo(id, alfrescoSync);

        }

        /// <summary>
        /// Sync all completed DSTs on Alfresco 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="alfrescoSync">Domain associated to the account.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdAlfrescoSyncPostAsyncWithHttpInfo (string id, AlfrescoSync alfrescoSync)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdAlfrescoSyncPost");
            // verify the required parameter 'alfrescoSync' is set
            if (alfrescoSync == null)
                throw new ApiException(400, "Missing required parameter 'alfrescoSync' when calling BackofficeApi->OrganizationIdAlfrescoSyncPost");

            var localVarPath = "/organization/{id}/alfrescoSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alfrescoSync != null && alfrescoSync.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(alfrescoSync); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alfrescoSync; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdAlfrescoSyncPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable or disable an Organization account. Enable or disable an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns></returns>
        public void OrganizationIdDelete (string id, bool enabled = default(bool))
        {
             OrganizationIdDeleteWithHttpInfo(id, enabled);
        }

        /// <summary>
        /// Enable or disable an Organization account. Enable or disable an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationIdDeleteWithHttpInfo (string id, bool enabled = default(bool))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdDelete");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable or disable an Organization account. Enable or disable an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationIdDeleteAsync (string id, bool enabled = default(bool))
        {
             await OrganizationIdDeleteAsyncWithHttpInfo(id, enabled);

        }

        /// <summary>
        /// Enable or disable an Organization account. Enable or disable an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="enabled">New status to set (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdDeleteAsyncWithHttpInfo (string id, bool enabled = default(bool))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdDelete");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Organization</returns>
        public Organization OrganizationIdGet (string id)
        {
             ApiResponse<Organization> localVarResponse = OrganizationIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse<Organization> OrganizationIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdGet");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Retrieve info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> OrganizationIdGetAsync (string id)
        {
             ApiResponse<Organization> localVarResponse = await OrganizationIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> OrganizationIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdGet");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Retrieve public resources 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream OrganizationIdPublicGet (string res, string id = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = OrganizationIdPublicGetWithHttpInfo(res, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve public resources 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> OrganizationIdPublicGetWithHttpInfo (string res, string id = default(string))
        {
            // verify the required parameter 'res' is set
            if (res == null)
                throw new ApiException(400, "Missing required parameter 'res' when calling BackofficeApi->OrganizationIdPublicGet");

            var localVarPath = "/organization/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (res != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "res", res)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdPublicGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve public resources 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> OrganizationIdPublicGetAsync (string res, string id = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await OrganizationIdPublicGetAsyncWithHttpInfo(res, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve public resources 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="res">resource id</param>
        /// <param name="id">organization id (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrganizationIdPublicGetAsyncWithHttpInfo (string res, string id = default(string))
        {
            // verify the required parameter 'res' is set
            if (res == null)
                throw new ApiException(400, "Missing required parameter 'res' when calling BackofficeApi->OrganizationIdPublicGet");

            var localVarPath = "/organization/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (res != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "res", res)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdPublicGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Update info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns></returns>
        public void OrganizationIdPut (string id, Organization organization = default(Organization))
        {
             OrganizationIdPutWithHttpInfo(id, organization);
        }

        /// <summary>
        /// Update info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationIdPutWithHttpInfo (string id, Organization organization = default(Organization))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdPut");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organization != null && organization.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organization; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationIdPutAsync (string id, Organization organization = default(Organization))
        {
             await OrganizationIdPutAsyncWithHttpInfo(id, organization);

        }

        /// <summary>
        /// Update info on one organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdPutAsyncWithHttpInfo (string id, Organization organization = default(Organization))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdPut");

            var localVarPath = "/organization/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (organization != null && organization.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organization; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an organization resource Get an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream OrganizationIdResourceGet (string id, string resPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = OrganizationIdResourceGetWithHttpInfo(id, resPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an organization resource Get an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> OrganizationIdResourceGetWithHttpInfo (string id, string resPath)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdResourceGet");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationIdResourceGet");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdResourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get an organization resource Get an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> OrganizationIdResourceGetAsync (string id, string resPath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await OrganizationIdResourceGetAsyncWithHttpInfo(id, resPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an organization resource Get an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> OrganizationIdResourceGetAsyncWithHttpInfo (string id, string resPath)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdResourceGet");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationIdResourceGet");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdResourceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Create or overwrite an organization resource Create or overwrite an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns></returns>
        public void OrganizationIdResourcePut (string id, string resPath, System.IO.Stream file)
        {
             OrganizationIdResourcePutWithHttpInfo(id, resPath, file);
        }

        /// <summary>
        /// Create or overwrite an organization resource Create or overwrite an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationIdResourcePutWithHttpInfo (string id, string resPath, System.IO.Stream file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdResourcePut");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationIdResourcePut");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling BackofficeApi->OrganizationIdResourcePut");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdResourcePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create or overwrite an organization resource Create or overwrite an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationIdResourcePutAsync (string id, string resPath, System.IO.Stream file)
        {
             await OrganizationIdResourcePutAsyncWithHttpInfo(id, resPath, file);

        }

        /// <summary>
        /// Create or overwrite an organization resource Create or overwrite an organization resource
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <param name="file">The file to upload.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationIdResourcePutAsyncWithHttpInfo (string id, string resPath, System.IO.Stream file)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationIdResourcePut");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationIdResourcePut");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling BackofficeApi->OrganizationIdResourcePut");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationIdResourcePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an organization resource Deletes a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns></returns>
        public void OrganizationResourceIdDelete (string id, string resPath)
        {
             OrganizationResourceIdDeleteWithHttpInfo(id, resPath);
        }

        /// <summary>
        /// Delete an organization resource Deletes a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationResourceIdDeleteWithHttpInfo (string id, string resPath)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationResourceIdDelete");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationResourceIdDelete");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an organization resource Deletes a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationResourceIdDeleteAsync (string id, string resPath)
        {
             await OrganizationResourceIdDeleteAsyncWithHttpInfo(id, resPath);

        }

        /// <summary>
        /// Delete an organization resource Deletes a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <param name="resPath"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationResourceIdDeleteAsyncWithHttpInfo (string id, string resPath)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationResourceIdDelete");
            // verify the required parameter 'resPath' is set
            if (resPath == null)
                throw new ApiException(400, "Missing required parameter 'resPath' when calling BackofficeApi->OrganizationResourceIdDelete");

            var localVarPath = "/organization/{id}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resPath", resPath)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all the organization resources List all the organization resources.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> OrganizationResourcesGet (string id)
        {
             ApiResponse<List<string>> localVarResponse = OrganizationResourcesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all the organization resources List all the organization resources.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> OrganizationResourcesGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationResourcesGet");

            var localVarPath = "/organization/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// List all the organization resources List all the organization resources.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> OrganizationResourcesGetAsync (string id)
        {
             ApiResponse<List<string>> localVarResponse = await OrganizationResourcesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all the organization resources List all the organization resources.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of the unique id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> OrganizationResourcesGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BackofficeApi->OrganizationResourcesGet");

            var localVarPath = "/organization/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieve organization tags 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> OrganizationTagsGet ()
        {
             ApiResponse<List<string>> localVarResponse = OrganizationTagsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve organization tags 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> OrganizationTagsGetWithHttpInfo ()
        {

            var localVarPath = "/organization/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieve organization tags 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> OrganizationTagsGetAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await OrganizationTagsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve organization tags 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> OrganizationTagsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/organization/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get the list of organizations Get the list of organizations
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>OrganizationsGetResponse</returns>
        public OrganizationsGetResponse OrganizationsGet (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string))
        {
             ApiResponse<OrganizationsGetResponse> localVarResponse = OrganizationsGetWithHttpInfo(top, skip, count, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of organizations Get the list of organizations
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of OrganizationsGetResponse</returns>
        public ApiResponse<OrganizationsGetResponse> OrganizationsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string))
        {

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationsGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationsGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationsGetResponse)));
        }

        /// <summary>
        /// Get the list of organizations Get the list of organizations
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of OrganizationsGetResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationsGetResponse> OrganizationsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string))
        {
             ApiResponse<OrganizationsGetResponse> localVarResponse = await OrganizationsGetAsyncWithHttpInfo(top, skip, count, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of organizations Get the list of organizations
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationsGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationsGetResponse>> OrganizationsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string filter = default(string))
        {

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationsGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationsGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationsGetResponse)));
        }

        /// <summary>
        /// Create a new organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns></returns>
        public void OrganizationsPost (Organization organization = default(Organization))
        {
             OrganizationsPostWithHttpInfo(organization);
        }

        /// <summary>
        /// Create a new organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrganizationsPostWithHttpInfo (Organization organization = default(Organization))
        {

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null && organization.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organization; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrganizationsPostAsync (Organization organization = default(Organization))
        {
             await OrganizationsPostAsyncWithHttpInfo(organization);

        }

        /// <summary>
        /// Create a new organization 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrganizationsPostAsyncWithHttpInfo (Organization organization = default(Organization))
        {

            var localVarPath = "/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null && organization.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organization; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrganizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
