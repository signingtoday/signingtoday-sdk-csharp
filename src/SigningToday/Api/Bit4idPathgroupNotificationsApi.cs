/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupNotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear Notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API notifies that a user consumed all active notifications for a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        void NotificationsDstIdDelete (Guid id);

        /// <summary>
        /// Clear Notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API notifies that a user consumed all active notifications for a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsDstIdDeleteWithHttpInfo (Guid id);
        /// <summary>
        /// Get latest DST Notifications
        /// </summary>
        /// <remarks>
        /// This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>NotificationsResponse</returns>
        NotificationsResponse NotificationsDstsGet (int top = default(int), long skip = default(long), bool count = default(bool));

        /// <summary>
        /// Get latest DST Notifications
        /// </summary>
        /// <remarks>
        /// This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>ApiResponse of NotificationsResponse</returns>
        ApiResponse<NotificationsResponse> NotificationsDstsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool));
        /// <summary>
        /// Clear a registered push notification token
        /// </summary>
        /// <remarks>
        /// This API deregister a deviceId from the push notifications.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns></returns>
        void NotificationsPushTokenDelete (string deviceId);

        /// <summary>
        /// Clear a registered push notification token
        /// </summary>
        /// <remarks>
        /// This API deregister a deviceId from the push notifications.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsPushTokenDeleteWithHttpInfo (string deviceId);
        /// <summary>
        /// Register a token for push notifications
        /// </summary>
        /// <remarks>
        /// This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns></returns>
        void NotificationsPushTokenPost (InlineObject6 inlineObject6);

        /// <summary>
        /// Register a token for push notifications
        /// </summary>
        /// <remarks>
        /// This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsPushTokenPostWithHttpInfo (InlineObject6 inlineObject6);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clear Notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API notifies that a user consumed all active notifications for a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsDstIdDeleteAsync (Guid id);

        /// <summary>
        /// Clear Notifications for a DST
        /// </summary>
        /// <remarks>
        /// This API notifies that a user consumed all active notifications for a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsDstIdDeleteAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Get latest DST Notifications
        /// </summary>
        /// <remarks>
        /// This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>Task of NotificationsResponse</returns>
        System.Threading.Tasks.Task<NotificationsResponse> NotificationsDstsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool));

        /// <summary>
        /// Get latest DST Notifications
        /// </summary>
        /// <remarks>
        /// This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>Task of ApiResponse (NotificationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationsResponse>> NotificationsDstsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool));
        /// <summary>
        /// Clear a registered push notification token
        /// </summary>
        /// <remarks>
        /// This API deregister a deviceId from the push notifications.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsPushTokenDeleteAsync (string deviceId);

        /// <summary>
        /// Clear a registered push notification token
        /// </summary>
        /// <remarks>
        /// This API deregister a deviceId from the push notifications.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsPushTokenDeleteAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Register a token for push notifications
        /// </summary>
        /// <remarks>
        /// This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsPushTokenPostAsync (InlineObject6 inlineObject6);

        /// <summary>
        /// Register a token for push notifications
        /// </summary>
        /// <remarks>
        /// This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsPushTokenPostAsyncWithHttpInfo (InlineObject6 inlineObject6);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupNotificationsApi : IBit4idPathgroupNotificationsApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupNotificationsApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupNotificationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupNotificationsApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupNotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupNotificationsApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clear Notifications for a DST This API notifies that a user consumed all active notifications for a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns></returns>
        public void NotificationsDstIdDelete (Guid id)
        {
             NotificationsDstIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Clear Notifications for a DST This API notifies that a user consumed all active notifications for a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsDstIdDeleteWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupNotificationsApi->NotificationsDstIdDelete");

            var localVarPath = "/notifications/dst/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDstIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clear Notifications for a DST This API notifies that a user consumed all active notifications for a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsDstIdDeleteAsync (Guid id)
        {
             await NotificationsDstIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Clear Notifications for a DST This API notifies that a user consumed all active notifications for a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsDstIdDeleteAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupNotificationsApi->NotificationsDstIdDelete");

            var localVarPath = "/notifications/dst/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDstIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get latest DST Notifications This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>NotificationsResponse</returns>
        public NotificationsResponse NotificationsDstsGet (int top = default(int), long skip = default(long), bool count = default(bool))
        {
             ApiResponse<NotificationsResponse> localVarResponse = NotificationsDstsGetWithHttpInfo(top, skip, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get latest DST Notifications This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>ApiResponse of NotificationsResponse</returns>
        public ApiResponse<NotificationsResponse> NotificationsDstsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool))
        {

            var localVarPath = "/notifications/dsts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDstsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationsResponse)));
        }

        /// <summary>
        /// Get latest DST Notifications This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>Task of NotificationsResponse</returns>
        public async System.Threading.Tasks.Task<NotificationsResponse> NotificationsDstsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool))
        {
             ApiResponse<NotificationsResponse> localVarResponse = await NotificationsDstsGetAsyncWithHttpInfo(top, skip, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get latest DST Notifications This APIs allows to get latest user Notifications for DSTs sorted desc by time.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <returns>Task of ApiResponse (NotificationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationsResponse>> NotificationsDstsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool))
        {

            var localVarPath = "/notifications/dsts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDstsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationsResponse)));
        }

        /// <summary>
        /// Clear a registered push notification token This API deregister a deviceId from the push notifications.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns></returns>
        public void NotificationsPushTokenDelete (string deviceId)
        {
             NotificationsPushTokenDeleteWithHttpInfo(deviceId);
        }

        /// <summary>
        /// Clear a registered push notification token This API deregister a deviceId from the push notifications.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsPushTokenDeleteWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling Bit4idPathgroupNotificationsApi->NotificationsPushTokenDelete");

            var localVarPath = "/notifications/push-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsPushTokenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Clear a registered push notification token This API deregister a deviceId from the push notifications.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsPushTokenDeleteAsync (string deviceId)
        {
             await NotificationsPushTokenDeleteAsyncWithHttpInfo(deviceId);

        }

        /// <summary>
        /// Clear a registered push notification token This API deregister a deviceId from the push notifications.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The _deviceId_ to deregister</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsPushTokenDeleteAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling Bit4idPathgroupNotificationsApi->NotificationsPushTokenDelete");

            var localVarPath = "/notifications/push-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deviceId", deviceId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsPushTokenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register a token for push notifications This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns></returns>
        public void NotificationsPushTokenPost (InlineObject6 inlineObject6)
        {
             NotificationsPushTokenPostWithHttpInfo(inlineObject6);
        }

        /// <summary>
        /// Register a token for push notifications This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsPushTokenPostWithHttpInfo (InlineObject6 inlineObject6)
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject6' when calling Bit4idPathgroupNotificationsApi->NotificationsPushTokenPost");

            var localVarPath = "/notifications/push-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject6 != null && inlineObject6.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject6); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject6; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsPushTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register a token for push notifications This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsPushTokenPostAsync (InlineObject6 inlineObject6)
        {
             await NotificationsPushTokenPostAsyncWithHttpInfo(inlineObject6);

        }

        /// <summary>
        /// Register a token for push notifications This API allows to register a token for push notifications. Only trusted deviceId can be registered. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsPushTokenPostAsyncWithHttpInfo (InlineObject6 inlineObject6)
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject6' when calling Bit4idPathgroupNotificationsApi->NotificationsPushTokenPost");

            var localVarPath = "/notifications/push-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject6 != null && inlineObject6.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject6); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject6; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsPushTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
