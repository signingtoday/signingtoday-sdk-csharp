/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enable or disable a User
        /// </summary>
        /// <remarks>
        /// This API allows to **enable** or **disable** a User account. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns></returns>
        void UserIdDelete (Guid id, bool enabled = default(bool));

        /// <summary>
        /// Enable or disable a User
        /// </summary>
        /// <remarks>
        /// This API allows to **enable** or **disable** a User account. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserIdDeleteWithHttpInfo (Guid id, bool enabled = default(bool));
        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>User</returns>
        User UserIdGet (Guid id);

        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserIdGetWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve User identities
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve user identities.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;Identity&gt;</returns>
        List<Identity> UserIdIdentitiesGet (Guid id);

        /// <summary>
        /// Retrieve User identities
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve user identities.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;Identity&gt;</returns>
        ApiResponse<List<Identity>> UserIdIdentitiesGetWithHttpInfo (Guid id);
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// This API allows to update a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns></returns>
        void UserIdPut (Guid id, User user);

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// This API allows to update a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserIdPutWithHttpInfo (Guid id, User user);
        /// <summary>
        /// Change the User role
        /// </summary>
        /// <remarks>
        /// This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns></returns>
        void UserIdRolePut (Guid id, string newRole);

        /// <summary>
        /// Change the User role
        /// </summary>
        /// <remarks>
        /// This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserIdRolePutWithHttpInfo (Guid id, string newRole);
        /// <summary>
        /// Retrieve Users
        /// </summary>
        /// <remarks>
        /// This allows to get the list of the Users of an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>UsersGetResponse</returns>
        UsersGetResponse UsersGet (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve Users
        /// </summary>
        /// <remarks>
        /// This allows to get the list of the Users of an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of UsersGetResponse</returns>
        ApiResponse<UsersGetResponse> UsersGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Retrieve UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to get the list of the UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>UserGroupGetResponse</returns>
        UserGroupGetResponse UsersGroupsGet (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to get the list of the UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of UserGroupGetResponse</returns>
        ApiResponse<UserGroupGetResponse> UsersGroupsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Create a new UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to create a new UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns></returns>
        void UsersGroupsPost (List<UserGroup> userGroup);

        /// <summary>
        /// Create a new UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to create a new UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersGroupsPostWithHttpInfo (List<UserGroup> userGroup);
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// This API allows to create a new User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Guid</returns>
        Guid UsersPost (CreateUserRequest createUserRequest);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// This API allows to create a new User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> UsersPostWithHttpInfo (CreateUserRequest createUserRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enable or disable a User
        /// </summary>
        /// <remarks>
        /// This API allows to **enable** or **disable** a User account. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserIdDeleteAsync (Guid id, bool enabled = default(bool));

        /// <summary>
        /// Enable or disable a User
        /// </summary>
        /// <remarks>
        /// This API allows to **enable** or **disable** a User account. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserIdDeleteAsyncWithHttpInfo (Guid id, bool enabled = default(bool));
        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserIdGetAsync (Guid id);

        /// <summary>
        /// Retrieve a User
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserIdGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve User identities
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve user identities.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;Identity&gt;</returns>
        System.Threading.Tasks.Task<List<Identity>> UserIdIdentitiesGetAsync (Guid id);

        /// <summary>
        /// Retrieve User identities
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve user identities.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;Identity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Identity>>> UserIdIdentitiesGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// This API allows to update a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserIdPutAsync (Guid id, User user);

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// This API allows to update a User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserIdPutAsyncWithHttpInfo (Guid id, User user);
        /// <summary>
        /// Change the User role
        /// </summary>
        /// <remarks>
        /// This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserIdRolePutAsync (Guid id, string newRole);

        /// <summary>
        /// Change the User role
        /// </summary>
        /// <remarks>
        /// This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserIdRolePutAsyncWithHttpInfo (Guid id, string newRole);
        /// <summary>
        /// Retrieve Users
        /// </summary>
        /// <remarks>
        /// This allows to get the list of the Users of an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of UsersGetResponse</returns>
        System.Threading.Tasks.Task<UsersGetResponse> UsersGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve Users
        /// </summary>
        /// <remarks>
        /// This allows to get the list of the Users of an Organization.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (UsersGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersGetResponse>> UsersGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Retrieve UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to get the list of the UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of UserGroupGetResponse</returns>
        System.Threading.Tasks.Task<UserGroupGetResponse> UsersGroupsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));

        /// <summary>
        /// Retrieve UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to get the list of the UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (UserGroupGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroupGetResponse>> UsersGroupsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string));
        /// <summary>
        /// Create a new UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to create a new UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersGroupsPostAsync (List<UserGroup> userGroup);

        /// <summary>
        /// Create a new UserGroups
        /// </summary>
        /// <remarks>
        /// This API allows to create a new UserGroups.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersGroupsPostAsyncWithHttpInfo (List<UserGroup> userGroup);
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// This API allows to create a new User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> UsersPostAsync (CreateUserRequest createUserRequest);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// This API allows to create a new User.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> UsersPostAsyncWithHttpInfo (CreateUserRequest createUserRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupUsersApi : IBit4idPathgroupUsersApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupUsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupUsersApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupUsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupUsersApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupUsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupUsersApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enable or disable a User This API allows to **enable** or **disable** a User account. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns></returns>
        public void UserIdDelete (Guid id, bool enabled = default(bool))
        {
             UserIdDeleteWithHttpInfo(id, enabled);
        }

        /// <summary>
        /// Enable or disable a User This API allows to **enable** or **disable** a User account. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserIdDeleteWithHttpInfo (Guid id, bool enabled = default(bool))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdDelete");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enable or disable a User This API allows to **enable** or **disable** a User account. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserIdDeleteAsync (Guid id, bool enabled = default(bool))
        {
             await UserIdDeleteAsyncWithHttpInfo(id, enabled);

        }

        /// <summary>
        /// Enable or disable a User This API allows to **enable** or **disable** a User account. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="enabled">This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserIdDeleteAsyncWithHttpInfo (Guid id, bool enabled = default(bool))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdDelete");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a User This API allows to retrieve a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>User</returns>
        public User UserIdGet (Guid id)
        {
             ApiResponse<User> localVarResponse = UserIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a User This API allows to retrieve a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UserIdGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdGet");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve a User This API allows to retrieve a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserIdGetAsync (Guid id)
        {
             ApiResponse<User> localVarResponse = await UserIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a User This API allows to retrieve a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserIdGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdGet");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve User identities This API allows to retrieve user identities.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>List&lt;Identity&gt;</returns>
        public List<Identity> UserIdIdentitiesGet (Guid id)
        {
             ApiResponse<List<Identity>> localVarResponse = UserIdIdentitiesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User identities This API allows to retrieve user identities.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of List&lt;Identity&gt;</returns>
        public ApiResponse<List<Identity>> UserIdIdentitiesGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdIdentitiesGet");

            var localVarPath = "/user/{id}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Identity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Identity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Identity>)));
        }

        /// <summary>
        /// Retrieve User identities This API allows to retrieve user identities.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of List&lt;Identity&gt;</returns>
        public async System.Threading.Tasks.Task<List<Identity>> UserIdIdentitiesGetAsync (Guid id)
        {
             ApiResponse<List<Identity>> localVarResponse = await UserIdIdentitiesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve User identities This API allows to retrieve user identities.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (List&lt;Identity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Identity>>> UserIdIdentitiesGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdIdentitiesGet");

            var localVarPath = "/user/{id}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Identity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Identity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Identity>)));
        }

        /// <summary>
        /// Update a User This API allows to update a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns></returns>
        public void UserIdPut (Guid id, User user)
        {
             UserIdPutWithHttpInfo(id, user);
        }

        /// <summary>
        /// Update a User This API allows to update a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserIdPutWithHttpInfo (Guid id, User user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdPut");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling Bit4idPathgroupUsersApi->UserIdPut");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a User This API allows to update a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserIdPutAsync (Guid id, User user)
        {
             await UserIdPutAsyncWithHttpInfo(id, user);

        }

        /// <summary>
        /// Update a User This API allows to update a User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="user">User replacing current object.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserIdPutAsyncWithHttpInfo (Guid id, User user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdPut");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling Bit4idPathgroupUsersApi->UserIdPut");

            var localVarPath = "/user/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the User role This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns></returns>
        public void UserIdRolePut (Guid id, string newRole)
        {
             UserIdRolePutWithHttpInfo(id, newRole);
        }

        /// <summary>
        /// Change the User role This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserIdRolePutWithHttpInfo (Guid id, string newRole)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdRolePut");
            // verify the required parameter 'newRole' is set
            if (newRole == null)
                throw new ApiException(400, "Missing required parameter 'newRole' when calling Bit4idPathgroupUsersApi->UserIdRolePut");

            var localVarPath = "/user/{id}/role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (newRole != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newRole", newRole)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdRolePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the User role This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserIdRolePutAsync (Guid id, string newRole)
        {
             await UserIdRolePutAsyncWithHttpInfo(id, newRole);

        }

        /// <summary>
        /// Change the User role This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="newRole">The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserIdRolePutAsyncWithHttpInfo (Guid id, string newRole)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupUsersApi->UserIdRolePut");
            // verify the required parameter 'newRole' is set
            if (newRole == null)
                throw new ApiException(400, "Missing required parameter 'newRole' when calling Bit4idPathgroupUsersApi->UserIdRolePut");

            var localVarPath = "/user/{id}/role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (newRole != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newRole", newRole)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdRolePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve Users This allows to get the list of the Users of an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>UsersGetResponse</returns>
        public UsersGetResponse UsersGet (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<UsersGetResponse> localVarResponse = UsersGetWithHttpInfo(top, skip, count, orderBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Users This allows to get the list of the Users of an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of UsersGetResponse</returns>
        public ApiResponse<UsersGetResponse> UsersGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UsersGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponse)));
        }

        /// <summary>
        /// Retrieve Users This allows to get the list of the Users of an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of UsersGetResponse</returns>
        public async System.Threading.Tasks.Task<UsersGetResponse> UsersGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<UsersGetResponse> localVarResponse = await UsersGetAsyncWithHttpInfo(top, skip, count, orderBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Users This allows to get the list of the Users of an Organization.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (UsersGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersGetResponse>> UsersGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UsersGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponse)));
        }

        /// <summary>
        /// Retrieve UserGroups This API allows to get the list of the UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>UserGroupGetResponse</returns>
        public UserGroupGetResponse UsersGroupsGet (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<UserGroupGetResponse> localVarResponse = UsersGroupsGetWithHttpInfo(top, skip, count, orderBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve UserGroups This API allows to get the list of the UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>ApiResponse of UserGroupGetResponse</returns>
        public ApiResponse<UserGroupGetResponse> UsersGroupsGetWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/users/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroupGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserGroupGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroupGetResponse)));
        }

        /// <summary>
        /// Retrieve UserGroups This API allows to get the list of the UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of UserGroupGetResponse</returns>
        public async System.Threading.Tasks.Task<UserGroupGetResponse> UsersGroupsGetAsync (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {
             ApiResponse<UserGroupGetResponse> localVarResponse = await UsersGroupsGetAsyncWithHttpInfo(top, skip, count, orderBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve UserGroups This API allows to get the list of the UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">A number of results to return. Applied after **$skip**  (optional)</param>
        /// <param name="skip">An offset into the collection of results (optional)</param>
        /// <param name="count">If true, the server includes the count of all the items in the response  (optional)</param>
        /// <param name="orderBy">An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)</param>
        /// <param name="filter">A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)</param>
        /// <returns>Task of ApiResponse (UserGroupGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroupGetResponse>> UsersGroupsGetAsyncWithHttpInfo (int top = default(int), long skip = default(long), bool count = default(bool), string orderBy = default(string), string filter = default(string))
        {

            var localVarPath = "/users/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$count", count)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroupGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserGroupGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroupGetResponse)));
        }

        /// <summary>
        /// Create a new UserGroups This API allows to create a new UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns></returns>
        public void UsersGroupsPost (List<UserGroup> userGroup)
        {
             UsersGroupsPostWithHttpInfo(userGroup);
        }

        /// <summary>
        /// Create a new UserGroups This API allows to create a new UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersGroupsPostWithHttpInfo (List<UserGroup> userGroup)
        {
            // verify the required parameter 'userGroup' is set
            if (userGroup == null)
                throw new ApiException(400, "Missing required parameter 'userGroup' when calling Bit4idPathgroupUsersApi->UsersGroupsPost");

            var localVarPath = "/users/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGroup != null && userGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGroup; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new UserGroups This API allows to create a new UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersGroupsPostAsync (List<UserGroup> userGroup)
        {
             await UsersGroupsPostAsyncWithHttpInfo(userGroup);

        }

        /// <summary>
        /// Create a new UserGroups This API allows to create a new UserGroups.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroup">UserGroup list to be added.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersGroupsPostAsyncWithHttpInfo (List<UserGroup> userGroup)
        {
            // verify the required parameter 'userGroup' is set
            if (userGroup == null)
                throw new ApiException(400, "Missing required parameter 'userGroup' when calling Bit4idPathgroupUsersApi->UsersGroupsPost");

            var localVarPath = "/users/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userGroup != null && userGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGroup; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new User This API allows to create a new User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Guid</returns>
        public Guid UsersPost (CreateUserRequest createUserRequest)
        {
             ApiResponse<Guid> localVarResponse = UsersPostWithHttpInfo(createUserRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new User This API allows to create a new User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>ApiResponse of Guid</returns>
        public ApiResponse<Guid> UsersPostWithHttpInfo (CreateUserRequest createUserRequest)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserRequest' when calling Bit4idPathgroupUsersApi->UsersPost");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUserRequest != null && createUserRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

        /// <summary>
        /// Create a new User This API allows to create a new User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> UsersPostAsync (CreateUserRequest createUserRequest)
        {
             ApiResponse<Guid> localVarResponse = await UsersPostAsyncWithHttpInfo(createUserRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new User This API allows to create a new User.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"></param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid>> UsersPostAsyncWithHttpInfo (CreateUserRequest createUserRequest)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
                throw new ApiException(400, "Missing required parameter 'createUserRequest' when calling Bit4idPathgroupUsersApi->UsersPost");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createUserRequest != null && createUserRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Guid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
        }

    }
}
