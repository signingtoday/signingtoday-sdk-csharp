/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consume a token to change the password
        /// </summary>
        /// <remarks>
        /// This API allows to change the password by consuming a token.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns></returns>
        void AuthChangePasswordPost (string passwordToken, string body);

        /// <summary>
        /// Consume a token to change the password
        /// </summary>
        /// <remarks>
        /// This API allows to change the password by consuming a token.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthChangePasswordPostWithHttpInfo (string passwordToken, string body);
        /// <summary>
        /// Request to recover own password
        /// </summary>
        /// <remarks>
        /// This API requests to recover the own password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns></returns>
        void AuthPasswordLostGet (string username, string domain);

        /// <summary>
        /// Request to recover own password
        /// </summary>
        /// <remarks>
        /// This API requests to recover the own password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthPasswordLostGetWithHttpInfo (string username, string domain);
        /// <summary>
        /// Reset a user password with superuser
        /// </summary>
        /// <remarks>
        /// This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns></returns>
        void AuthPasswordResetGet (string username, string domain);

        /// <summary>
        /// Reset a user password with superuser
        /// </summary>
        /// <remarks>
        /// This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthPasswordResetGetWithHttpInfo (string username, string domain);
        /// <summary>
        /// Reset your own password
        /// </summary>
        /// <remarks>
        /// This API allows to reset your own password knowing the previous one with a logged user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        void AuthPasswordResetPost (InlineObject4 inlineObject4);

        /// <summary>
        /// Reset your own password
        /// </summary>
        /// <remarks>
        /// This API allows to reset your own password knowing the previous one with a logged user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthPasswordResetPostWithHttpInfo (InlineObject4 inlineObject4);
        /// <summary>
        /// Get token to change password
        /// </summary>
        /// <remarks>
        /// This API allows to get a password token to use in order to change a password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AuthPasswordTokenGet ();

        /// <summary>
        /// Get token to change password
        /// </summary>
        /// <remarks>
        /// This API allows to get a password token to use in order to change a password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AuthPasswordTokenGetWithHttpInfo ();
        /// <summary>
        /// Register or Update a SAML user
        /// </summary>
        /// <remarks>
        /// This API allows to register or Update a SAML user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns></returns>
        void AuthSamlPost (string domain, string iDToken1, string iDToken2);

        /// <summary>
        /// Register or Update a SAML user
        /// </summary>
        /// <remarks>
        /// This API allows to register or Update a SAML user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthSamlPostWithHttpInfo (string domain, string iDToken1, string iDToken2);
        /// <summary>
        /// Return the current logged in user
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the current logged in user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User AuthUser ();

        /// <summary>
        /// Return the current logged in user
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the current logged in user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> AuthUserWithHttpInfo ();
        /// <summary>
        /// Retrieve the App configuration
        /// </summary>
        /// <remarks>
        /// This API allows to get the public configuration associated to the application. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ConfigurationGet ();

        /// <summary>
        /// Retrieve the App configuration
        /// </summary>
        /// <remarks>
        /// This API allows to get the public configuration associated to the application. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ConfigurationGetWithHttpInfo ();
        /// <summary>
        /// Log out current user terminating the session
        /// </summary>
        /// <remarks>
        /// This API allows to Log out current user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void LogoutUser ();

        /// <summary>
        /// Log out current user terminating the session
        /// </summary>
        /// <remarks>
        /// This API allows to Log out current user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutUserWithHttpInfo ();
        /// <summary>
        /// Get the bearer token
        /// </summary>
        /// <remarks>
        /// This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 OauthTokenPost (string username = default(string), string password = default(string), string grantType = default(string));

        /// <summary>
        /// Get the bearer token
        /// </summary>
        /// <remarks>
        /// This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> OauthTokenPostWithHttpInfo (string username = default(string), string password = default(string), string grantType = default(string));
        /// <summary>
        /// Retrieve a Resource (of service)
        /// </summary>
        /// <remarks>
        /// This API allows to extract thumbnails from a PDF Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PdfResourceIdThumbsGet (Guid id, int page, int width = default(int));

        /// <summary>
        /// Retrieve a Resource (of service)
        /// </summary>
        /// <remarks>
        /// This API allows to extract thumbnails from a PDF Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PdfResourceIdThumbsGetWithHttpInfo (Guid id, int page, int width = default(int));
        /// <summary>
        /// Change the password of a service user
        /// </summary>
        /// <remarks>
        /// This API allows to change the password of a **service user**. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns></returns>
        void ServiceChangePasswordPost (string username, string domain, string body);

        /// <summary>
        /// Change the password of a service user
        /// </summary>
        /// <remarks>
        /// This API allows to change the password of a **service user**. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServiceChangePasswordPostWithHttpInfo (string username, string domain, string body);
        /// <summary>
        /// Sync user accounts
        /// </summary>
        /// <remarks>
        /// This API allows to sync user accounts.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>UserSyncReport</returns>
        UserSyncReport ServiceUsersSyncPost (List<InlineObject> inlineObject);

        /// <summary>
        /// Sync user accounts
        /// </summary>
        /// <remarks>
        /// This API allows to sync user accounts.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>ApiResponse of UserSyncReport</returns>
        ApiResponse<UserSyncReport> ServiceUsersSyncPostWithHttpInfo (List<InlineObject> inlineObject);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Consume a token to change the password
        /// </summary>
        /// <remarks>
        /// This API allows to change the password by consuming a token.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthChangePasswordPostAsync (string passwordToken, string body);

        /// <summary>
        /// Consume a token to change the password
        /// </summary>
        /// <remarks>
        /// This API allows to change the password by consuming a token.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthChangePasswordPostAsyncWithHttpInfo (string passwordToken, string body);
        /// <summary>
        /// Request to recover own password
        /// </summary>
        /// <remarks>
        /// This API requests to recover the own password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthPasswordLostGetAsync (string username, string domain);

        /// <summary>
        /// Request to recover own password
        /// </summary>
        /// <remarks>
        /// This API requests to recover the own password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordLostGetAsyncWithHttpInfo (string username, string domain);
        /// <summary>
        /// Reset a user password with superuser
        /// </summary>
        /// <remarks>
        /// This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthPasswordResetGetAsync (string username, string domain);

        /// <summary>
        /// Reset a user password with superuser
        /// </summary>
        /// <remarks>
        /// This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordResetGetAsyncWithHttpInfo (string username, string domain);
        /// <summary>
        /// Reset your own password
        /// </summary>
        /// <remarks>
        /// This API allows to reset your own password knowing the previous one with a logged user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthPasswordResetPostAsync (InlineObject4 inlineObject4);

        /// <summary>
        /// Reset your own password
        /// </summary>
        /// <remarks>
        /// This API allows to reset your own password knowing the previous one with a logged user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordResetPostAsyncWithHttpInfo (InlineObject4 inlineObject4);
        /// <summary>
        /// Get token to change password
        /// </summary>
        /// <remarks>
        /// This API allows to get a password token to use in order to change a password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AuthPasswordTokenGetAsync ();

        /// <summary>
        /// Get token to change password
        /// </summary>
        /// <remarks>
        /// This API allows to get a password token to use in order to change a password.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AuthPasswordTokenGetAsyncWithHttpInfo ();
        /// <summary>
        /// Register or Update a SAML user
        /// </summary>
        /// <remarks>
        /// This API allows to register or Update a SAML user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthSamlPostAsync (string domain, string iDToken1, string iDToken2);

        /// <summary>
        /// Register or Update a SAML user
        /// </summary>
        /// <remarks>
        /// This API allows to register or Update a SAML user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthSamlPostAsyncWithHttpInfo (string domain, string iDToken1, string iDToken2);
        /// <summary>
        /// Return the current logged in user
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the current logged in user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> AuthUserAsync ();

        /// <summary>
        /// Return the current logged in user
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve the current logged in user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> AuthUserAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve the App configuration
        /// </summary>
        /// <remarks>
        /// This API allows to get the public configuration associated to the application. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ConfigurationGetAsync ();

        /// <summary>
        /// Retrieve the App configuration
        /// </summary>
        /// <remarks>
        /// This API allows to get the public configuration associated to the application. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ConfigurationGetAsyncWithHttpInfo ();
        /// <summary>
        /// Log out current user terminating the session
        /// </summary>
        /// <remarks>
        /// This API allows to Log out current user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutUserAsync ();

        /// <summary>
        /// Log out current user terminating the session
        /// </summary>
        /// <remarks>
        /// This API allows to Log out current user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get the bearer token
        /// </summary>
        /// <remarks>
        /// This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> OauthTokenPostAsync (string username = default(string), string password = default(string), string grantType = default(string));

        /// <summary>
        /// Get the bearer token
        /// </summary>
        /// <remarks>
        /// This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> OauthTokenPostAsyncWithHttpInfo (string username = default(string), string password = default(string), string grantType = default(string));
        /// <summary>
        /// Retrieve a Resource (of service)
        /// </summary>
        /// <remarks>
        /// This API allows to extract thumbnails from a PDF Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PdfResourceIdThumbsGetAsync (Guid id, int page, int width = default(int));

        /// <summary>
        /// Retrieve a Resource (of service)
        /// </summary>
        /// <remarks>
        /// This API allows to extract thumbnails from a PDF Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PdfResourceIdThumbsGetAsyncWithHttpInfo (Guid id, int page, int width = default(int));
        /// <summary>
        /// Change the password of a service user
        /// </summary>
        /// <remarks>
        /// This API allows to change the password of a **service user**. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServiceChangePasswordPostAsync (string username, string domain, string body);

        /// <summary>
        /// Change the password of a service user
        /// </summary>
        /// <remarks>
        /// This API allows to change the password of a **service user**. 
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServiceChangePasswordPostAsyncWithHttpInfo (string username, string domain, string body);
        /// <summary>
        /// Sync user accounts
        /// </summary>
        /// <remarks>
        /// This API allows to sync user accounts.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>Task of UserSyncReport</returns>
        System.Threading.Tasks.Task<UserSyncReport> ServiceUsersSyncPostAsync (List<InlineObject> inlineObject);

        /// <summary>
        /// Sync user accounts
        /// </summary>
        /// <remarks>
        /// This API allows to sync user accounts.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>Task of ApiResponse (UserSyncReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSyncReport>> ServiceUsersSyncPostAsyncWithHttpInfo (List<InlineObject> inlineObject);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupServicesApi : IBit4idPathgroupServicesApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupServicesApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupServicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupServicesApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupServicesApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Consume a token to change the password This API allows to change the password by consuming a token.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns></returns>
        public void AuthChangePasswordPost (string passwordToken, string body)
        {
             AuthChangePasswordPostWithHttpInfo(passwordToken, body);
        }

        /// <summary>
        /// Consume a token to change the password This API allows to change the password by consuming a token.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthChangePasswordPostWithHttpInfo (string passwordToken, string body)
        {
            // verify the required parameter 'passwordToken' is set
            if (passwordToken == null)
                throw new ApiException(400, "Missing required parameter 'passwordToken' when calling Bit4idPathgroupServicesApi->AuthChangePasswordPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Bit4idPathgroupServicesApi->AuthChangePasswordPost");

            var localVarPath = "/auth/changePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passwordToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passwordToken", passwordToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Consume a token to change the password This API allows to change the password by consuming a token.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthChangePasswordPostAsync (string passwordToken, string body)
        {
             await AuthChangePasswordPostAsyncWithHttpInfo(passwordToken, body);

        }

        /// <summary>
        /// Consume a token to change the password This API allows to change the password by consuming a token.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passwordToken">The password token issued to change password</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthChangePasswordPostAsyncWithHttpInfo (string passwordToken, string body)
        {
            // verify the required parameter 'passwordToken' is set
            if (passwordToken == null)
                throw new ApiException(400, "Missing required parameter 'passwordToken' when calling Bit4idPathgroupServicesApi->AuthChangePasswordPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Bit4idPathgroupServicesApi->AuthChangePasswordPost");

            var localVarPath = "/auth/changePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passwordToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passwordToken", passwordToken)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request to recover own password This API requests to recover the own password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns></returns>
        public void AuthPasswordLostGet (string username, string domain)
        {
             AuthPasswordLostGetWithHttpInfo(username, domain);
        }

        /// <summary>
        /// Request to recover own password This API requests to recover the own password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthPasswordLostGetWithHttpInfo (string username, string domain)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->AuthPasswordLostGet");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthPasswordLostGet");

            var localVarPath = "/auth/passwordLost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordLostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request to recover own password This API requests to recover the own password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthPasswordLostGetAsync (string username, string domain)
        {
             await AuthPasswordLostGetAsyncWithHttpInfo(username, domain);

        }

        /// <summary>
        /// Request to recover own password This API requests to recover the own password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordLostGetAsyncWithHttpInfo (string username, string domain)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->AuthPasswordLostGet");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthPasswordLostGet");

            var localVarPath = "/auth/passwordLost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordLostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset a user password with superuser This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns></returns>
        public void AuthPasswordResetGet (string username, string domain)
        {
             AuthPasswordResetGetWithHttpInfo(username, domain);
        }

        /// <summary>
        /// Reset a user password with superuser This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthPasswordResetGetWithHttpInfo (string username, string domain)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->AuthPasswordResetGet");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthPasswordResetGet");

            var localVarPath = "/auth/passwordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordResetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset a user password with superuser This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthPasswordResetGetAsync (string username, string domain)
        {
             await AuthPasswordResetGetAsyncWithHttpInfo(username, domain);

        }

        /// <summary>
        /// Reset a user password with superuser This API allows to reset the password of a user. This is possible when the request is performed with a superuser.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordResetGetAsyncWithHttpInfo (string username, string domain)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->AuthPasswordResetGet");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthPasswordResetGet");

            var localVarPath = "/auth/passwordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordResetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset your own password This API allows to reset your own password knowing the previous one with a logged user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        public void AuthPasswordResetPost (InlineObject4 inlineObject4)
        {
             AuthPasswordResetPostWithHttpInfo(inlineObject4);
        }

        /// <summary>
        /// Reset your own password This API allows to reset your own password knowing the previous one with a logged user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthPasswordResetPostWithHttpInfo (InlineObject4 inlineObject4)
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject4' when calling Bit4idPathgroupServicesApi->AuthPasswordResetPost");

            var localVarPath = "/auth/passwordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject4 != null && inlineObject4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject4; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordResetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset your own password This API allows to reset your own password knowing the previous one with a logged user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthPasswordResetPostAsync (InlineObject4 inlineObject4)
        {
             await AuthPasswordResetPostAsyncWithHttpInfo(inlineObject4);

        }

        /// <summary>
        /// Reset your own password This API allows to reset your own password knowing the previous one with a logged user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthPasswordResetPostAsyncWithHttpInfo (InlineObject4 inlineObject4)
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject4' when calling Bit4idPathgroupServicesApi->AuthPasswordResetPost");

            var localVarPath = "/auth/passwordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject4 != null && inlineObject4.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject4); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject4; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordResetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get token to change password This API allows to get a password token to use in order to change a password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AuthPasswordTokenGet ()
        {
             ApiResponse<List<Object>> localVarResponse = AuthPasswordTokenGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get token to change password This API allows to get a password token to use in order to change a password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> AuthPasswordTokenGetWithHttpInfo ()
        {

            var localVarPath = "/auth/passwordToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get token to change password This API allows to get a password token to use in order to change a password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AuthPasswordTokenGetAsync ()
        {
             ApiResponse<List<Object>> localVarResponse = await AuthPasswordTokenGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get token to change password This API allows to get a password token to use in order to change a password.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AuthPasswordTokenGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/passwordToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPasswordTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Register or Update a SAML user This API allows to register or Update a SAML user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns></returns>
        public void AuthSamlPost (string domain, string iDToken1, string iDToken2)
        {
             AuthSamlPostWithHttpInfo(domain, iDToken1, iDToken2);
        }

        /// <summary>
        /// Register or Update a SAML user This API allows to register or Update a SAML user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthSamlPostWithHttpInfo (string domain, string iDToken1, string iDToken2)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthSamlPost");
            // verify the required parameter 'iDToken1' is set
            if (iDToken1 == null)
                throw new ApiException(400, "Missing required parameter 'iDToken1' when calling Bit4idPathgroupServicesApi->AuthSamlPost");
            // verify the required parameter 'iDToken2' is set
            if (iDToken2 == null)
                throw new ApiException(400, "Missing required parameter 'iDToken2' when calling Bit4idPathgroupServicesApi->AuthSamlPost");

            var localVarPath = "/auth/saml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarFormParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // form parameter
            if (iDToken1 != null) localVarFormParams.Add("IDToken1", this.Configuration.ApiClient.ParameterToString(iDToken1)); // form parameter
            if (iDToken2 != null) localVarFormParams.Add("IDToken2", this.Configuration.ApiClient.ParameterToString(iDToken2)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthSamlPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register or Update a SAML user This API allows to register or Update a SAML user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthSamlPostAsync (string domain, string iDToken1, string iDToken2)
        {
             await AuthSamlPostAsyncWithHttpInfo(domain, iDToken1, iDToken2);

        }

        /// <summary>
        /// Register or Update a SAML user This API allows to register or Update a SAML user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">SAML domain</param>
        /// <param name="iDToken1">The BASE64-encoded SAML Reply in JSON</param>
        /// <param name="iDToken2">The Hex-encoded HMAC-SHA256 of the decoded IDToken1</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthSamlPostAsyncWithHttpInfo (string domain, string iDToken1, string iDToken2)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->AuthSamlPost");
            // verify the required parameter 'iDToken1' is set
            if (iDToken1 == null)
                throw new ApiException(400, "Missing required parameter 'iDToken1' when calling Bit4idPathgroupServicesApi->AuthSamlPost");
            // verify the required parameter 'iDToken2' is set
            if (iDToken2 == null)
                throw new ApiException(400, "Missing required parameter 'iDToken2' when calling Bit4idPathgroupServicesApi->AuthSamlPost");

            var localVarPath = "/auth/saml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarFormParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // form parameter
            if (iDToken1 != null) localVarFormParams.Add("IDToken1", this.Configuration.ApiClient.ParameterToString(iDToken1)); // form parameter
            if (iDToken2 != null) localVarFormParams.Add("IDToken2", this.Configuration.ApiClient.ParameterToString(iDToken2)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthSamlPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Return the current logged in user This API allows to retrieve the current logged in user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User AuthUser ()
        {
             ApiResponse<User> localVarResponse = AuthUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the current logged in user This API allows to retrieve the current logged in user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> AuthUserWithHttpInfo ()
        {

            var localVarPath = "/auth/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Return the current logged in user This API allows to retrieve the current logged in user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> AuthUserAsync ()
        {
             ApiResponse<User> localVarResponse = await AuthUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the current logged in user This API allows to retrieve the current logged in user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> AuthUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Retrieve the App configuration This API allows to get the public configuration associated to the application. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> ConfigurationGet ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = ConfigurationGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the App configuration This API allows to get the public configuration associated to the application. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> ConfigurationGetWithHttpInfo ()
        {

            var localVarPath = "/service/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigurationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retrieve the App configuration This API allows to get the public configuration associated to the application. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ConfigurationGetAsync ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await ConfigurationGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the App configuration This API allows to get the public configuration associated to the application. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ConfigurationGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/service/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigurationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Log out current user terminating the session This API allows to Log out current user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void LogoutUser ()
        {
             LogoutUserWithHttpInfo();
        }

        /// <summary>
        /// Log out current user terminating the session This API allows to Log out current user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogoutUserWithHttpInfo ()
        {

            var localVarPath = "/auth/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Log out current user terminating the session This API allows to Log out current user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutUserAsync ()
        {
             await LogoutUserAsyncWithHttpInfo();

        }

        /// <summary>
        /// Log out current user terminating the session This API allows to Log out current user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogoutUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the bearer token This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 OauthTokenPost (string username = default(string), string password = default(string), string grantType = default(string))
        {
             ApiResponse<InlineResponse200> localVarResponse = OauthTokenPostWithHttpInfo(username, password, grantType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the bearer token This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> OauthTokenPostWithHttpInfo (string username = default(string), string password = default(string), string grantType = default(string))
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OauthTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get the bearer token This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> OauthTokenPostAsync (string username = default(string), string password = default(string), string grantType = default(string))
        {
             ApiResponse<InlineResponse200> localVarResponse = await OauthTokenPostAsyncWithHttpInfo(username, password, grantType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the bearer token This API allows to get the token needed to access other APIs through the OAuth2 authentication.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username in the form _username_@_domain_ where *domain* is the organization the user belongs to (optional)</param>
        /// <param name="password">This is the actual password of the user (optional)</param>
        /// <param name="grantType">A parameter that indicates the type of the grant in order to perform the basic authentication (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> OauthTokenPostAsyncWithHttpInfo (string username = default(string), string password = default(string), string grantType = default(string))
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OauthTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Retrieve a Resource (of service) This API allows to extract thumbnails from a PDF Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PdfResourceIdThumbsGet (Guid id, int page, int width = default(int))
        {
             ApiResponse<System.IO.Stream> localVarResponse = PdfResourceIdThumbsGetWithHttpInfo(id, page, width);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Resource (of service) This API allows to extract thumbnails from a PDF Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> PdfResourceIdThumbsGetWithHttpInfo (Guid id, int page, int width = default(int))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupServicesApi->PdfResourceIdThumbsGet");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling Bit4idPathgroupServicesApi->PdfResourceIdThumbsGet");

            var localVarPath = "/pdfResource/{id}/thumbs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/jpeg",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PdfResourceIdThumbsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve a Resource (of service) This API allows to extract thumbnails from a PDF Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PdfResourceIdThumbsGetAsync (Guid id, int page, int width = default(int))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PdfResourceIdThumbsGetAsyncWithHttpInfo(id, page, width);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Resource (of service) This API allows to extract thumbnails from a PDF Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="page">The page to retrieve</param>
        /// <param name="width">The output image width (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PdfResourceIdThumbsGetAsyncWithHttpInfo (Guid id, int page, int width = default(int))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupServicesApi->PdfResourceIdThumbsGet");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling Bit4idPathgroupServicesApi->PdfResourceIdThumbsGet");

            var localVarPath = "/pdfResource/{id}/thumbs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/jpeg",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PdfResourceIdThumbsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Change the password of a service user This API allows to change the password of a **service user**. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns></returns>
        public void ServiceChangePasswordPost (string username, string domain, string body)
        {
             ServiceChangePasswordPostWithHttpInfo(username, domain, body);
        }

        /// <summary>
        /// Change the password of a service user This API allows to change the password of a **service user**. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ServiceChangePasswordPostWithHttpInfo (string username, string domain, string body)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");

            var localVarPath = "/service/changePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the password of a service user This API allows to change the password of a **service user**. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServiceChangePasswordPostAsync (string username, string domain, string body)
        {
             await ServiceChangePasswordPostAsyncWithHttpInfo(username, domain, body);

        }

        /// <summary>
        /// Change the password of a service user This API allows to change the password of a **service user**. 
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username associated to the account</param>
        /// <param name="domain">Domain associated to the account</param>
        /// <param name="body">New password associated to the account (BCrypt)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ServiceChangePasswordPostAsyncWithHttpInfo (string username, string domain, string body)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Bit4idPathgroupServicesApi->ServiceChangePasswordPost");

            var localVarPath = "/service/changePassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (domain != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "domain", domain)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sync user accounts This API allows to sync user accounts.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>UserSyncReport</returns>
        public UserSyncReport ServiceUsersSyncPost (List<InlineObject> inlineObject)
        {
             ApiResponse<UserSyncReport> localVarResponse = ServiceUsersSyncPostWithHttpInfo(inlineObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sync user accounts This API allows to sync user accounts.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>ApiResponse of UserSyncReport</returns>
        public ApiResponse<UserSyncReport> ServiceUsersSyncPostWithHttpInfo (List<InlineObject> inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling Bit4idPathgroupServicesApi->ServiceUsersSyncPost");

            var localVarPath = "/service/users/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceUsersSyncPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSyncReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSyncReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSyncReport)));
        }

        /// <summary>
        /// Sync user accounts This API allows to sync user accounts.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>Task of UserSyncReport</returns>
        public async System.Threading.Tasks.Task<UserSyncReport> ServiceUsersSyncPostAsync (List<InlineObject> inlineObject)
        {
             ApiResponse<UserSyncReport> localVarResponse = await ServiceUsersSyncPostAsyncWithHttpInfo(inlineObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sync user accounts This API allows to sync user accounts.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject">User Accounts</param>
        /// <returns>Task of ApiResponse (UserSyncReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSyncReport>> ServiceUsersSyncPostAsyncWithHttpInfo (List<InlineObject> inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling Bit4idPathgroupServicesApi->ServiceUsersSyncPost");

            var localVarPath = "/service/users/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServiceUsersSyncPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSyncReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserSyncReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSyncReport)));
        }

    }
}
