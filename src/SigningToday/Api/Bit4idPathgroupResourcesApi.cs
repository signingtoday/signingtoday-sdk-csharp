/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SigningToday.Client;
using SigningToday.Model;

namespace SigningToday.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBit4idPathgroupResourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve all resources associated to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve all resources associated to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DSTIdResourcesGet (Guid id);

        /// <summary>
        /// Retrieve all resources associated to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve all resources associated to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DSTIdResourcesGetWithHttpInfo (Guid id);
        /// <summary>
        /// Append a new resource to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to append a new Resource to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTIdResourcesPatch (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string));

        /// <summary>
        /// Append a new resource to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to append a new Resource to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTIdResourcesPatchWithHttpInfo (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string));
        /// <summary>
        /// Delete a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to delete a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        DigitalSignatureTransaction DSTResourceIdDelete (Guid id);

        /// <summary>
        /// Delete a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to delete a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        ApiResponse<DigitalSignatureTransaction> DSTResourceIdDeleteWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ResourceIdGet (Guid id);

        /// <summary>
        /// Retrieve a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ResourceIdGetWithHttpInfo (Guid id);
        /// <summary>
        /// Update a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to update a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns></returns>
        void ResourceIdPut (Guid id, LFResource lFResource);

        /// <summary>
        /// Update a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to update a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResourceIdPutWithHttpInfo (Guid id, LFResource lFResource);
        /// <summary>
        /// Delete a user appearance resource.
        /// </summary>
        /// <remarks>
        /// This API allows to delete an identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns></returns>
        void UserIdIdentityIdentityIdAppearanceDelete (Guid id, Guid identityId);

        /// <summary>
        /// Delete a user appearance resource.
        /// </summary>
        /// <remarks>
        /// This API allows to delete an identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserIdIdentityIdentityIdAppearanceDeleteWithHttpInfo (Guid id, Guid identityId);
        /// <summary>
        /// Download an identity appearance resource
        /// </summary>
        /// <remarks>
        /// This API allows to get the identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream UserIdIdentityIdentityIdAppearanceGet (Guid id, Guid identityId);

        /// <summary>
        /// Download an identity appearance resource
        /// </summary>
        /// <remarks>
        /// This API allows to get the identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> UserIdIdentityIdentityIdAppearanceGetWithHttpInfo (Guid id, Guid identityId);
        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity
        /// </summary>
        /// <remarks>
        /// This API allows to add a graphical appearance to the identity of a user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>LFResource</returns>
        LFResource UserIdIdentityIdentityIdAppearancePost (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string));

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity
        /// </summary>
        /// <remarks>
        /// This API allows to add a graphical appearance to the identity of a user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>ApiResponse of LFResource</returns>
        ApiResponse<LFResource> UserIdIdentityIdentityIdAppearancePostWithHttpInfo (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve all resources associated to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve all resources associated to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DSTIdResourcesGetAsync (Guid id);

        /// <summary>
        /// Retrieve all resources associated to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve all resources associated to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DSTIdResourcesGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Append a new resource to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to append a new Resource to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdResourcesPatchAsync (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string));

        /// <summary>
        /// Append a new resource to a DST
        /// </summary>
        /// <remarks>
        /// This API allows to append a new Resource to a DST.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdResourcesPatchAsyncWithHttpInfo (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string));
        /// <summary>
        /// Delete a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to delete a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTResourceIdDeleteAsync (Guid id);

        /// <summary>
        /// Delete a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to delete a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTResourceIdDeleteAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Retrieve a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ResourceIdGetAsync (Guid id);

        /// <summary>
        /// Retrieve a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to retrieve a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ResourceIdGetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Update a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to update a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResourceIdPutAsync (Guid id, LFResource lFResource);

        /// <summary>
        /// Update a Resource
        /// </summary>
        /// <remarks>
        /// This API allows to update a Resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourceIdPutAsyncWithHttpInfo (Guid id, LFResource lFResource);
        /// <summary>
        /// Delete a user appearance resource.
        /// </summary>
        /// <remarks>
        /// This API allows to delete an identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserIdIdentityIdentityIdAppearanceDeleteAsync (Guid id, Guid identityId);

        /// <summary>
        /// Delete a user appearance resource.
        /// </summary>
        /// <remarks>
        /// This API allows to delete an identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserIdIdentityIdentityIdAppearanceDeleteAsyncWithHttpInfo (Guid id, Guid identityId);
        /// <summary>
        /// Download an identity appearance resource
        /// </summary>
        /// <remarks>
        /// This API allows to get the identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> UserIdIdentityIdentityIdAppearanceGetAsync (Guid id, Guid identityId);

        /// <summary>
        /// Download an identity appearance resource
        /// </summary>
        /// <remarks>
        /// This API allows to get the identity appearance resource.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UserIdIdentityIdentityIdAppearanceGetAsyncWithHttpInfo (Guid id, Guid identityId);
        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity
        /// </summary>
        /// <remarks>
        /// This API allows to add a graphical appearance to the identity of a user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>Task of LFResource</returns>
        System.Threading.Tasks.Task<LFResource> UserIdIdentityIdentityIdAppearancePostAsync (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string));

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity
        /// </summary>
        /// <remarks>
        /// This API allows to add a graphical appearance to the identity of a user.
        /// </remarks>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>Task of ApiResponse (LFResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<LFResource>> UserIdIdentityIdentityIdAppearancePostAsyncWithHttpInfo (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Bit4idPathgroupResourcesApi : IBit4idPathgroupResourcesApi
    {
        private SigningToday.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupResourcesApi(String basePath)
        {
            this.Configuration = new SigningToday.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupResourcesApi"/> class
        /// </summary>
        /// <returns></returns>
        public Bit4idPathgroupResourcesApi()
        {
            this.Configuration = SigningToday.Client.Configuration.Default;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bit4idPathgroupResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Bit4idPathgroupResourcesApi(SigningToday.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigningToday.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigningToday.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigningToday.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigningToday.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve all resources associated to a DST This API allows to retrieve all resources associated to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DSTIdResourcesGet (Guid id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DSTIdResourcesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all resources associated to a DST This API allows to retrieve all resources associated to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DSTIdResourcesGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesGet");

            var localVarPath = "/DST/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve all resources associated to a DST This API allows to retrieve all resources associated to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DSTIdResourcesGetAsync (Guid id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DSTIdResourcesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all resources associated to a DST This API allows to retrieve all resources associated to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DSTIdResourcesGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesGet");

            var localVarPath = "/DST/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Append a new resource to a DST This API allows to append a new Resource to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTIdResourcesPatch (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTIdResourcesPatchWithHttpInfo(id, file, filename, resourceType, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a new resource to a DST This API allows to append a new Resource to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTIdResourcesPatchWithHttpInfo (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");

            var localVarPath = "/DST/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (resourceType != null) localVarFormParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdResourcesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Append a new resource to a DST This API allows to append a new Resource to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTIdResourcesPatchAsync (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTIdResourcesPatchAsyncWithHttpInfo(id, file, filename, resourceType, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a new resource to a DST This API allows to append a new Resource to a DST.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="file">The file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType"></param>
        /// <param name="title">User-defined title of the resource. (optional)</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTIdResourcesPatchAsyncWithHttpInfo (Guid id, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling Bit4idPathgroupResourcesApi->DSTIdResourcesPatch");

            var localVarPath = "/DST/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (resourceType != null) localVarFormParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTIdResourcesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Delete a Resource This API allows to delete a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>DigitalSignatureTransaction</returns>
        public DigitalSignatureTransaction DSTResourceIdDelete (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = DSTResourceIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Resource This API allows to delete a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of DigitalSignatureTransaction</returns>
        public ApiResponse<DigitalSignatureTransaction> DSTResourceIdDeleteWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTResourceIdDelete");

            var localVarPath = "/DST/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Delete a Resource This API allows to delete a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of DigitalSignatureTransaction</returns>
        public async System.Threading.Tasks.Task<DigitalSignatureTransaction> DSTResourceIdDeleteAsync (Guid id)
        {
             ApiResponse<DigitalSignatureTransaction> localVarResponse = await DSTResourceIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Resource This API allows to delete a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (DigitalSignatureTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DigitalSignatureTransaction>> DSTResourceIdDeleteAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->DSTResourceIdDelete");

            var localVarPath = "/DST/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DSTResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DigitalSignatureTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DigitalSignatureTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DigitalSignatureTransaction)));
        }

        /// <summary>
        /// Retrieve a Resource This API allows to retrieve a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ResourceIdGet (Guid id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ResourceIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Resource This API allows to retrieve a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ResourceIdGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->ResourceIdGet");

            var localVarPath = "/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Retrieve a Resource This API allows to retrieve a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ResourceIdGetAsync (Guid id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ResourceIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Resource This API allows to retrieve a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ResourceIdGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->ResourceIdGet");

            var localVarPath = "/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Update a Resource This API allows to update a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns></returns>
        public void ResourceIdPut (Guid id, LFResource lFResource)
        {
             ResourceIdPutWithHttpInfo(id, lFResource);
        }

        /// <summary>
        /// Update a Resource This API allows to update a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResourceIdPutWithHttpInfo (Guid id, LFResource lFResource)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->ResourceIdPut");
            // verify the required parameter 'lFResource' is set
            if (lFResource == null)
                throw new ApiException(400, "Missing required parameter 'lFResource' when calling Bit4idPathgroupResourcesApi->ResourceIdPut");

            var localVarPath = "/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lFResource != null && lFResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lFResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lFResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Resource This API allows to update a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResourceIdPutAsync (Guid id, LFResource lFResource)
        {
             await ResourceIdPutAsyncWithHttpInfo(id, lFResource);

        }

        /// <summary>
        /// Update a Resource This API allows to update a Resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="lFResource">Resource replacing current object.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResourceIdPutAsyncWithHttpInfo (Guid id, LFResource lFResource)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->ResourceIdPut");
            // verify the required parameter 'lFResource' is set
            if (lFResource == null)
                throw new ApiException(400, "Missing required parameter 'lFResource' when calling Bit4idPathgroupResourcesApi->ResourceIdPut");

            var localVarPath = "/resource/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lFResource != null && lFResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lFResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lFResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user appearance resource. This API allows to delete an identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns></returns>
        public void UserIdIdentityIdentityIdAppearanceDelete (Guid id, Guid identityId)
        {
             UserIdIdentityIdentityIdAppearanceDeleteWithHttpInfo(id, identityId);
        }

        /// <summary>
        /// Delete a user appearance resource. This API allows to delete an identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserIdIdentityIdentityIdAppearanceDeleteWithHttpInfo (Guid id, Guid identityId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceDelete");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceDelete");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearanceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user appearance resource. This API allows to delete an identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserIdIdentityIdentityIdAppearanceDeleteAsync (Guid id, Guid identityId)
        {
             await UserIdIdentityIdentityIdAppearanceDeleteAsyncWithHttpInfo(id, identityId);

        }

        /// <summary>
        /// Delete a user appearance resource. This API allows to delete an identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserIdIdentityIdentityIdAppearanceDeleteAsyncWithHttpInfo (Guid id, Guid identityId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceDelete");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceDelete");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearanceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download an identity appearance resource This API allows to get the identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream UserIdIdentityIdentityIdAppearanceGet (Guid id, Guid identityId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = UserIdIdentityIdentityIdAppearanceGetWithHttpInfo(id, identityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an identity appearance resource This API allows to get the identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> UserIdIdentityIdentityIdAppearanceGetWithHttpInfo (Guid id, Guid identityId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceGet");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceGet");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download an identity appearance resource This API allows to get the identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> UserIdIdentityIdentityIdAppearanceGetAsync (Guid id, Guid identityId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await UserIdIdentityIdentityIdAppearanceGetAsyncWithHttpInfo(id, identityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an identity appearance resource This API allows to get the identity appearance resource.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UserIdIdentityIdentityIdAppearanceGetAsyncWithHttpInfo (Guid id, Guid identityId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceGet");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearanceGet");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity This API allows to add a graphical appearance to the identity of a user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>LFResource</returns>
        public LFResource UserIdIdentityIdentityIdAppearancePost (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
             ApiResponse<LFResource> localVarResponse = UserIdIdentityIdentityIdAppearancePostWithHttpInfo(id, identityId, file, filename, resourceType, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity This API allows to add a graphical appearance to the identity of a user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>ApiResponse of LFResource</returns>
        public ApiResponse<LFResource> UserIdIdentityIdentityIdAppearancePostWithHttpInfo (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (resourceType != null) localVarFormParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LFResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LFResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LFResource)));
        }

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity This API allows to add a graphical appearance to the identity of a user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>Task of LFResource</returns>
        public async System.Threading.Tasks.Task<LFResource> UserIdIdentityIdentityIdAppearancePostAsync (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
             ApiResponse<LFResource> localVarResponse = await UserIdIdentityIdentityIdAppearancePostAsyncWithHttpInfo(id, identityId, file, filename, resourceType, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a graphical appearance to a user&#39;s identity This API allows to add a graphical appearance to the identity of a user.
        /// </summary>
        /// <exception cref="SigningToday.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The value of _the unique id_</param>
        /// <param name="identityId">The unique id of the _Identity_</param>
        /// <param name="file">The path of the file to upload</param>
        /// <param name="filename">The name of the file</param>
        /// <param name="resourceType">The type of the resource</param>
        /// <param name="title">User-defined title of the resource (optional)</param>
        /// <returns>Task of ApiResponse (LFResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LFResource>> UserIdIdentityIdentityIdAppearancePostAsyncWithHttpInfo (Guid id, Guid identityId, System.IO.Stream file, string filename, string resourceType, string title = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling Bit4idPathgroupResourcesApi->UserIdIdentityIdentityIdAppearancePost");

            var localVarPath = "/user/{id}/identity/{identity-id}/appearance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (identityId != null) localVarPathParams.Add("identity-id", this.Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (filename != null) localVarFormParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // form parameter
            if (resourceType != null) localVarFormParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserIdIdentityIdentityIdAppearancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LFResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LFResource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LFResource)));
        }

    }
}
