/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SigningToday.Api;
using SigningToday.Model;
using SigningToday.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SigningToday.Test
{
    /// <summary>
    ///  Class for testing OrganizationSettingsAlfrescoProperties
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OrganizationSettingsAlfrescoPropertiesTests
    {
        // TODO uncomment below to declare an instance variable for OrganizationSettingsAlfrescoProperties
        //private OrganizationSettingsAlfrescoProperties instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of OrganizationSettingsAlfrescoProperties
            //instance = new OrganizationSettingsAlfrescoProperties();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrganizationSettingsAlfrescoProperties
        /// </summary>
        [Test]
        public void OrganizationSettingsAlfrescoPropertiesInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" OrganizationSettingsAlfrescoProperties
            //Assert.IsInstanceOf(typeof(OrganizationSettingsAlfrescoProperties), instance);
        }


        /// <summary>
        /// Test the property 'Enabled'
        /// </summary>
        [Test]
        public void EnabledTest()
        {
            // TODO unit test for the property 'Enabled'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Username'
        /// </summary>
        [Test]
        public void UsernameTest()
        {
            // TODO unit test for the property 'Username'
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Test]
        public void PasswordTest()
        {
            // TODO unit test for the property 'Password'
        }
        /// <summary>
        /// Test the property 'BasePath'
        /// </summary>
        [Test]
        public void BasePathTest()
        {
            // TODO unit test for the property 'BasePath'
        }
        /// <summary>
        /// Test the property 'RelativePath'
        /// </summary>
        [Test]
        public void RelativePathTest()
        {
            // TODO unit test for the property 'RelativePath'
        }
        /// <summary>
        /// Test the property 'BaseNodeId'
        /// </summary>
        [Test]
        public void BaseNodeIdTest()
        {
            // TODO unit test for the property 'BaseNodeId'
        }

    }

}
