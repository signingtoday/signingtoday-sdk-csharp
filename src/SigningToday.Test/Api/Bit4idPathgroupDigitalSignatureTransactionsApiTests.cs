/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SigningToday.Client;
using SigningToday.Api;
using SigningToday.Model;

namespace SigningToday.Test
{
    /// <summary>
    ///  Class for testing Bit4idPathgroupDigitalSignatureTransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Bit4idPathgroupDigitalSignatureTransactionsApiTests
    {
        private Bit4idPathgroupDigitalSignatureTransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Bit4idPathgroupDigitalSignatureTransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Bit4idPathgroupDigitalSignatureTransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' Bit4idPathgroupDigitalSignatureTransactionsApi
            //Assert.IsInstanceOf(typeof(Bit4idPathgroupDigitalSignatureTransactionsApi), instance);
        }

        
        /// <summary>
        /// Test DSTIdAuditGet
        /// </summary>
        [Test]
        public void DSTIdAuditGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdAuditGet(id);
            //Assert.IsInstanceOf(typeof(List<AuditRecord>), response, "response is List<AuditRecord>");
        }
        
        /// <summary>
        /// Test DSTIdDelete
        /// </summary>
        [Test]
        public void DSTIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DSTIdDelete(id);
            
        }
        
        /// <summary>
        /// Test DSTIdFillPatch
        /// </summary>
        [Test]
        public void DSTIdFillPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //FillableForm fillableForm = null;
            //var response = instance.DSTIdFillPatch(id, fillableForm);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdGet
        /// </summary>
        [Test]
        public void DSTIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdGet(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdInstantiatePost
        /// </summary>
        [Test]
        public void DSTIdInstantiatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdInstantiatePost(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdModifyPost
        /// </summary>
        [Test]
        public void DSTIdModifyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdModifyPost(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdNotifyPost
        /// </summary>
        [Test]
        public void DSTIdNotifyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DSTIdNotifyPost(id);
            
        }
        
        /// <summary>
        /// Test DSTIdPublishPost
        /// </summary>
        [Test]
        public void DSTIdPublishPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdPublishPost(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdPut
        /// </summary>
        [Test]
        public void DSTIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DigitalSignatureTransaction digitalSignatureTransaction = null;
            //var response = instance.DSTIdPut(id, digitalSignatureTransaction);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdReplacePost
        /// </summary>
        [Test]
        public void DSTIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdReplacePost(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTIdSignDocIdSignIdGet
        /// </summary>
        [Test]
        public void DSTIdSignDocIdSignIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int docId = null;
            //int signId = null;
            //var response = instance.DSTIdSignDocIdSignIdGet(id, docId, signId);
            //Assert.IsInstanceOf(typeof(DSTSigningAddressResponse), response, "response is DSTSigningAddressResponse");
        }
        
        /// <summary>
        /// Test DSTIdTemplatizePost
        /// </summary>
        [Test]
        public void DSTIdTemplatizePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.DSTIdTemplatizePost(id);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
        /// <summary>
        /// Test DSTsGet
        /// </summary>
        [Test]
        public void DSTsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool template = null;
            //Guid userId = null;
            //int top = null;
            //long skip = null;
            //bool count = null;
            //string orderBy = null;
            //string filter = null;
            //var response = instance.DSTsGet(template, userId, top, skip, count, orderBy, filter);
            //Assert.IsInstanceOf(typeof(DSTsGetResponse), response, "response is DSTsGetResponse");
        }
        
        /// <summary>
        /// Test DSTsPost
        /// </summary>
        [Test]
        public void DSTsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DigitalSignatureTransaction digitalSignatureTransaction = null;
            //var response = instance.DSTsPost(digitalSignatureTransaction);
            //Assert.IsInstanceOf(typeof(DigitalSignatureTransaction), response, "response is DigitalSignatureTransaction");
        }
        
    }

}
