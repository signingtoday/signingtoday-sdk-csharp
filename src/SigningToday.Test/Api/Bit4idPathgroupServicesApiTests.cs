/* 
 * Signing Today Web
 *
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SigningToday.Client;
using SigningToday.Api;
using SigningToday.Model;

namespace SigningToday.Test
{
    /// <summary>
    ///  Class for testing Bit4idPathgroupServicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Bit4idPathgroupServicesApiTests
    {
        private Bit4idPathgroupServicesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Bit4idPathgroupServicesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Bit4idPathgroupServicesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' Bit4idPathgroupServicesApi
            //Assert.IsInstanceOf(typeof(Bit4idPathgroupServicesApi), instance);
        }

        
        /// <summary>
        /// Test AuthChangePasswordPost
        /// </summary>
        [Test]
        public void AuthChangePasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string passwordToken = null;
            //string body = null;
            //instance.AuthChangePasswordPost(passwordToken, body);
            
        }
        
        /// <summary>
        /// Test AuthPasswordLostGet
        /// </summary>
        [Test]
        public void AuthPasswordLostGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string domain = null;
            //instance.AuthPasswordLostGet(username, domain);
            
        }
        
        /// <summary>
        /// Test AuthPasswordResetGet
        /// </summary>
        [Test]
        public void AuthPasswordResetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string domain = null;
            //instance.AuthPasswordResetGet(username, domain);
            
        }
        
        /// <summary>
        /// Test AuthPasswordResetPost
        /// </summary>
        [Test]
        public void AuthPasswordResetPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject4 inlineObject4 = null;
            //instance.AuthPasswordResetPost(inlineObject4);
            
        }
        
        /// <summary>
        /// Test AuthPasswordTokenGet
        /// </summary>
        [Test]
        public void AuthPasswordTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AuthPasswordTokenGet();
            //Assert.IsInstanceOf(typeof(List<Object>), response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test AuthSamlPost
        /// </summary>
        [Test]
        public void AuthSamlPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string domain = null;
            //string iDToken1 = null;
            //string iDToken2 = null;
            //instance.AuthSamlPost(domain, iDToken1, iDToken2);
            
        }
        
        /// <summary>
        /// Test AuthUser
        /// </summary>
        [Test]
        public void AuthUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AuthUser();
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test ConfigurationGet
        /// </summary>
        [Test]
        public void ConfigurationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ConfigurationGet();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test LogoutUser
        /// </summary>
        [Test]
        public void LogoutUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.LogoutUser();
            
        }
        
        /// <summary>
        /// Test OauthTokenPost
        /// </summary>
        [Test]
        public void OauthTokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string password = null;
            //string grantType = null;
            //var response = instance.OauthTokenPost(username, password, grantType);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PdfResourceIdThumbsGet
        /// </summary>
        [Test]
        public void PdfResourceIdThumbsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int page = null;
            //int width = null;
            //var response = instance.PdfResourceIdThumbsGet(id, page, width);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ServiceChangePasswordPost
        /// </summary>
        [Test]
        public void ServiceChangePasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string domain = null;
            //string body = null;
            //instance.ServiceChangePasswordPost(username, domain, body);
            
        }
        
        /// <summary>
        /// Test ServiceUsersSyncPost
        /// </summary>
        [Test]
        public void ServiceUsersSyncPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<InlineObject> inlineObject = null;
            //var response = instance.ServiceUsersSyncPost(inlineObject);
            //Assert.IsInstanceOf(typeof(UserSyncReport), response, "response is UserSyncReport");
        }
        
    }

}
